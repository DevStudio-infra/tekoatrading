"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@trpc";
exports.ids = ["vendor-chunks/@trpc"];
exports.modules = {

/***/ "(ssr)/../node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs":
/*!**********************************************************************!*\
  !*** ../node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs ***!
  \**********************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCClientError)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/shared */ \"@trpc/server/shared\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__]);\n_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nfunction isTRPCClientError(cause) {\n    return cause instanceof TRPCClientError || /**\n     * @deprecated\n     * Delete in next major\n     */ cause instanceof Error && cause.name === 'TRPCClientError';\n}\nfunction isTRPCErrorResponse(obj) {\n    return (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(obj) && (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.i)(obj.error) && typeof obj.error.code === 'number' && typeof obj.error.message === 'string';\n}\nclass TRPCClientError extends Error {\n    static from(_cause, opts = {}) {\n        const cause = _cause;\n        if (isTRPCClientError(cause)) {\n            if (opts.meta) {\n                // Decorate with meta error data\n                cause.meta = {\n                    ...cause.meta,\n                    ...opts.meta\n                };\n            }\n            return cause;\n        }\n        if (isTRPCErrorResponse(cause)) {\n            return new TRPCClientError(cause.error.message, {\n                ...opts,\n                result: cause\n            });\n        }\n        if (!(cause instanceof Error)) {\n            return new TRPCClientError('Unknown error', {\n                ...opts,\n                cause: cause\n            });\n        }\n        return new TRPCClientError(cause.message, {\n            ...opts,\n            cause: (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.getCauseFromUnknown)(cause)\n        });\n    }\n    constructor(message, opts){\n        const cause = opts?.cause;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore https://github.com/tc39/proposal-error-cause\n        super(message, {\n            cause\n        });\n        this.meta = opts?.meta;\n        this.cause = cause;\n        this.shape = opts?.result?.error;\n        this.data = opts?.result?.error.data;\n        this.name = 'TRPCClientError';\n        Object.setPrototypeOf(this, TRPCClientError.prototype);\n    }\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L1RSUENDbGllbnRFcnJvci0zOGY5YTMyYS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTBEO0FBQ0s7QUFFL0QsU0FBU0csa0JBQWtCQyxLQUFLO0lBQzVCLE9BQU9BLGlCQUFpQkMsbUJBQW1COzs7S0FHMUMsR0FBR0QsaUJBQWlCRSxTQUFTRixNQUFNRyxJQUFJLEtBQUs7QUFDakQ7QUFDQSxTQUFTQyxvQkFBb0JDLEdBQUc7SUFDNUIsT0FBT1AsZ0VBQVFBLENBQUNPLFFBQVFQLGdFQUFRQSxDQUFDTyxJQUFJQyxLQUFLLEtBQUssT0FBT0QsSUFBSUMsS0FBSyxDQUFDQyxJQUFJLEtBQUssWUFBWSxPQUFPRixJQUFJQyxLQUFLLENBQUNFLE9BQU8sS0FBSztBQUN0SDtBQUNBLE1BQU1QLHdCQUF3QkM7SUFDMUIsT0FBT08sS0FBS0MsTUFBTSxFQUFFQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1FBQzNCLE1BQU1YLFFBQVFVO1FBQ2QsSUFBSVgsa0JBQWtCQyxRQUFRO1lBQzFCLElBQUlXLEtBQUtDLElBQUksRUFBRTtnQkFDWCxnQ0FBZ0M7Z0JBQ2hDWixNQUFNWSxJQUFJLEdBQUc7b0JBQ1QsR0FBR1osTUFBTVksSUFBSTtvQkFDYixHQUFHRCxLQUFLQyxJQUFJO2dCQUNoQjtZQUNKO1lBQ0EsT0FBT1o7UUFDWDtRQUNBLElBQUlJLG9CQUFvQkosUUFBUTtZQUM1QixPQUFPLElBQUlDLGdCQUFnQkQsTUFBTU0sS0FBSyxDQUFDRSxPQUFPLEVBQUU7Z0JBQzVDLEdBQUdHLElBQUk7Z0JBQ1BFLFFBQVFiO1lBQ1o7UUFDSjtRQUNBLElBQUksQ0FBRUEsQ0FBQUEsaUJBQWlCRSxLQUFJLEdBQUk7WUFDM0IsT0FBTyxJQUFJRCxnQkFBZ0IsaUJBQWlCO2dCQUN4QyxHQUFHVSxJQUFJO2dCQUNQWCxPQUFPQTtZQUNYO1FBQ0o7UUFDQSxPQUFPLElBQUlDLGdCQUFnQkQsTUFBTVEsT0FBTyxFQUFFO1lBQ3RDLEdBQUdHLElBQUk7WUFDUFgsT0FBT0osd0VBQW1CQSxDQUFDSTtRQUMvQjtJQUNKO0lBQ0FjLFlBQVlOLE9BQU8sRUFBRUcsSUFBSSxDQUFDO1FBQ3RCLE1BQU1YLFFBQVFXLE1BQU1YO1FBQ3BCLDZEQUE2RDtRQUM3RCwwREFBMEQ7UUFDMUQsS0FBSyxDQUFDUSxTQUFTO1lBQ1hSO1FBQ0o7UUFDQSxJQUFJLENBQUNZLElBQUksR0FBR0QsTUFBTUM7UUFDbEIsSUFBSSxDQUFDWixLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDZSxLQUFLLEdBQUdKLE1BQU1FLFFBQVFQO1FBQzNCLElBQUksQ0FBQ1UsSUFBSSxHQUFHTCxNQUFNRSxRQUFRUCxNQUFNVTtRQUNoQyxJQUFJLENBQUNiLElBQUksR0FBRztRQUNaYyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFakIsZ0JBQWdCa0IsU0FBUztJQUN6RDtBQUNKO0FBRWdDIiwic291cmNlcyI6WyJEOlxcdGVrb2EtZmlyc3RcXHRla29hLXRyYWRpbmdcXG5vZGVfbW9kdWxlc1xcQHRycGNcXGNsaWVudFxcZGlzdFxcVFJQQ0NsaWVudEVycm9yLTM4ZjlhMzJhLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDYXVzZUZyb21Vbmtub3duIH0gZnJvbSAnQHRycGMvc2VydmVyL3NoYXJlZCc7XG5pbXBvcnQgeyBpIGFzIGlzT2JqZWN0IH0gZnJvbSAnLi90cmFuc2Zvcm1SZXN1bHQtYWNlODY0YjgubWpzJztcblxuZnVuY3Rpb24gaXNUUlBDQ2xpZW50RXJyb3IoY2F1c2UpIHtcbiAgICByZXR1cm4gY2F1c2UgaW5zdGFuY2VvZiBUUlBDQ2xpZW50RXJyb3IgfHwgLyoqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBEZWxldGUgaW4gbmV4dCBtYWpvclxuICAgICAqLyBjYXVzZSBpbnN0YW5jZW9mIEVycm9yICYmIGNhdXNlLm5hbWUgPT09ICdUUlBDQ2xpZW50RXJyb3InO1xufVxuZnVuY3Rpb24gaXNUUlBDRXJyb3JSZXNwb25zZShvYmopIHtcbiAgICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBpc09iamVjdChvYmouZXJyb3IpICYmIHR5cGVvZiBvYmouZXJyb3IuY29kZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iai5lcnJvci5tZXNzYWdlID09PSAnc3RyaW5nJztcbn1cbmNsYXNzIFRSUENDbGllbnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBzdGF0aWMgZnJvbShfY2F1c2UsIG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCBjYXVzZSA9IF9jYXVzZTtcbiAgICAgICAgaWYgKGlzVFJQQ0NsaWVudEVycm9yKGNhdXNlKSkge1xuICAgICAgICAgICAgaWYgKG9wdHMubWV0YSkge1xuICAgICAgICAgICAgICAgIC8vIERlY29yYXRlIHdpdGggbWV0YSBlcnJvciBkYXRhXG4gICAgICAgICAgICAgICAgY2F1c2UubWV0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY2F1c2UubWV0YSxcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0cy5tZXRhXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYXVzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUUlBDRXJyb3JSZXNwb25zZShjYXVzZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVFJQQ0NsaWVudEVycm9yKGNhdXNlLmVycm9yLm1lc3NhZ2UsIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgIHJlc3VsdDogY2F1c2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGNhdXNlIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRSUENDbGllbnRFcnJvcignVW5rbm93biBlcnJvcicsIHtcbiAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgIGNhdXNlOiBjYXVzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBUUlBDQ2xpZW50RXJyb3IoY2F1c2UubWVzc2FnZSwge1xuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgIGNhdXNlOiBnZXRDYXVzZUZyb21Vbmtub3duKGNhdXNlKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgb3B0cyl7XG4gICAgICAgIGNvbnN0IGNhdXNlID0gb3B0cz8uY2F1c2U7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1lcnJvci1jYXVzZVxuICAgICAgICBzdXBlcihtZXNzYWdlLCB7XG4gICAgICAgICAgICBjYXVzZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tZXRhID0gb3B0cz8ubWV0YTtcbiAgICAgICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgICAgICB0aGlzLnNoYXBlID0gb3B0cz8ucmVzdWx0Py5lcnJvcjtcbiAgICAgICAgdGhpcy5kYXRhID0gb3B0cz8ucmVzdWx0Py5lcnJvci5kYXRhO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVFJQQ0NsaWVudEVycm9yJztcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRSUENDbGllbnRFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgVFJQQ0NsaWVudEVycm9yIGFzIFQgfTtcbiJdLCJuYW1lcyI6WyJnZXRDYXVzZUZyb21Vbmtub3duIiwiaSIsImlzT2JqZWN0IiwiaXNUUlBDQ2xpZW50RXJyb3IiLCJjYXVzZSIsIlRSUENDbGllbnRFcnJvciIsIkVycm9yIiwibmFtZSIsImlzVFJQQ0Vycm9yUmVzcG9uc2UiLCJvYmoiLCJlcnJvciIsImNvZGUiLCJtZXNzYWdlIiwiZnJvbSIsIl9jYXVzZSIsIm9wdHMiLCJtZXRhIiwicmVzdWx0IiwiY29uc3RydWN0b3IiLCJzaGFwZSIsImRhdGEiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsIlQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs":
/*!********************************************************************!*\
  !*** ../node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs ***!
  \********************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createHTTPBatchLink),\n/* harmony export */   h: () => (/* binding */ httpBatchLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"@trpc/server/observable\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-38f9a32a.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpUtils-b9d0cb48.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__, _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__, _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__]);\n([_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__, _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__, _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */ /**\n * A function that should never be called unless we messed something up.\n */ const throwFatalError = ()=>{\n    throw new Error('Something went wrong. Please submit an issue at https://github.com/trpc/trpc/issues/new');\n};\n/**\n * Dataloader that's very inspired by https://github.com/graphql/dataloader\n * Less configuration, no caching, and allows you to cancel requests\n * When cancelling a single fetch the whole batch will be cancelled only when _all_ items are cancelled\n */ function dataLoader(batchLoader) {\n    let pendingItems = null;\n    let dispatchTimer = null;\n    const destroyTimerAndPendingItems = ()=>{\n        clearTimeout(dispatchTimer);\n        dispatchTimer = null;\n        pendingItems = null;\n    };\n    /**\n   * Iterate through the items and split them into groups based on the `batchLoader`'s validate function\n   */ function groupItems(items) {\n        const groupedItems = [\n            []\n        ];\n        let index = 0;\n        while(true){\n            const item = items[index];\n            if (!item) {\n                break;\n            }\n            const lastGroup = groupedItems[groupedItems.length - 1];\n            if (item.aborted) {\n                // Item was aborted before it was dispatched\n                item.reject?.(new Error('Aborted'));\n                index++;\n                continue;\n            }\n            const isValid = batchLoader.validate(lastGroup.concat(item).map((it)=>it.key));\n            if (isValid) {\n                lastGroup.push(item);\n                index++;\n                continue;\n            }\n            if (lastGroup.length === 0) {\n                item.reject?.(new Error('Input is too big for a single dispatch'));\n                index++;\n                continue;\n            }\n            // Create new group, next iteration will try to add the item to that\n            groupedItems.push([]);\n        }\n        return groupedItems;\n    }\n    function dispatch() {\n        const groupedItems = groupItems(pendingItems);\n        destroyTimerAndPendingItems();\n        // Create batches for each group of items\n        for (const items of groupedItems){\n            if (!items.length) {\n                continue;\n            }\n            const batch = {\n                items,\n                cancel: throwFatalError\n            };\n            for (const item of items){\n                item.batch = batch;\n            }\n            const unitResolver = (index, value)=>{\n                const item = batch.items[index];\n                item.resolve?.(value);\n                item.batch = null;\n                item.reject = null;\n                item.resolve = null;\n            };\n            const { promise, cancel } = batchLoader.fetch(batch.items.map((_item)=>_item.key), unitResolver);\n            batch.cancel = cancel;\n            promise.then((result)=>{\n                for(let i = 0; i < result.length; i++){\n                    const value = result[i];\n                    unitResolver(i, value);\n                }\n                for (const item of batch.items){\n                    item.reject?.(new Error('Missing result'));\n                    item.batch = null;\n                }\n            }).catch((cause)=>{\n                for (const item of batch.items){\n                    item.reject?.(cause);\n                    item.batch = null;\n                }\n            });\n        }\n    }\n    function load(key) {\n        const item = {\n            aborted: false,\n            key,\n            batch: null,\n            resolve: throwFatalError,\n            reject: throwFatalError\n        };\n        const promise = new Promise((resolve, reject)=>{\n            item.reject = reject;\n            item.resolve = resolve;\n            if (!pendingItems) {\n                pendingItems = [];\n            }\n            pendingItems.push(item);\n        });\n        if (!dispatchTimer) {\n            dispatchTimer = setTimeout(dispatch);\n        }\n        const cancel = ()=>{\n            item.aborted = true;\n            if (item.batch?.items.every((item)=>item.aborted)) {\n                // All items in the batch have been cancelled\n                item.batch.cancel();\n                item.batch = null;\n            }\n        };\n        return {\n            promise,\n            cancel\n        };\n    }\n    return {\n        load\n    };\n}\n/**\n * @internal\n */ function createHTTPBatchLink(requester) {\n    return function httpBatchLink(opts) {\n        const resolvedOpts = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        const maxURLLength = opts.maxURLLength ?? Infinity;\n        // initialized config\n        return (runtime)=>{\n            const batchLoader = (type)=>{\n                const validate = (batchOps)=>{\n                    if (maxURLLength === Infinity) {\n                        // escape hatch for quick calcs\n                        return true;\n                    }\n                    const path = batchOps.map((op)=>op.path).join(',');\n                    const inputs = batchOps.map((op)=>op.input);\n                    const url = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.g)({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        inputs\n                    });\n                    return url.length <= maxURLLength;\n                };\n                const fetch = requester({\n                    ...resolvedOpts,\n                    runtime,\n                    type,\n                    opts\n                });\n                return {\n                    validate,\n                    fetch\n                };\n            };\n            const query = dataLoader(batchLoader('query'));\n            const mutation = dataLoader(batchLoader('mutation'));\n            const subscription = dataLoader(batchLoader('subscription'));\n            const loaders = {\n                query,\n                subscription,\n                mutation\n            };\n            return ({ op })=>{\n                return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const loader = loaders[op.type];\n                    const { promise, cancel } = loader.load(op);\n                    let _res = undefined;\n                    promise.then((res)=>{\n                        _res = res;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta: res.meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((err)=>{\n                        observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err, {\n                            meta: _res?.meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n            };\n        };\n    };\n}\nconst batchRequester = (requesterOpts)=>{\n    return (batchOps)=>{\n        const path = batchOps.map((op)=>op.path).join(',');\n        const inputs = batchOps.map((op)=>op.input);\n        const { promise, cancel } = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.j)({\n            ...requesterOpts,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === 'function') {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        });\n        return {\n            promise: promise.then((res)=>{\n                const resJSON = Array.isArray(res.json) ? res.json : batchOps.map(()=>res.json);\n                const result = resJSON.map((item)=>({\n                        meta: res.meta,\n                        json: item\n                    }));\n                return result;\n            }),\n            cancel\n        };\n    };\n};\nconst httpBatchLink = createHTTPBatchLink(batchRequester);\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs":
/*!****************************************************************!*\
  !*** ../node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs ***!
  \****************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBody),\n/* harmony export */   b: () => (/* binding */ getFetch),\n/* harmony export */   f: () => (/* binding */ fetchHTTPResponse),\n/* harmony export */   g: () => (/* binding */ getUrl),\n/* harmony export */   h: () => (/* binding */ httpRequest),\n/* harmony export */   j: () => (/* binding */ jsonHttpRequester),\n/* harmony export */   r: () => (/* binding */ resolveHTTPLinkOptions)\n/* harmony export */ });\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TRPCClientError-38f9a32a.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_0__]);\n_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nconst isFunction = (fn)=>typeof fn === 'function';\nfunction getFetch(customFetchImpl) {\n    if (customFetchImpl) {\n        return customFetchImpl;\n    }\n    if (false) {}\n    if (typeof globalThis !== 'undefined' && isFunction(globalThis.fetch)) {\n        return globalThis.fetch;\n    }\n    throw new Error('No fetch implementation found');\n}\nfunction getAbortController(customAbortControllerImpl) {\n    if (customAbortControllerImpl) {\n        return customAbortControllerImpl;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (false) {}\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== 'undefined' && globalThis.AbortController) {\n        return globalThis.AbortController;\n    }\n    return null;\n}\nfunction resolveHTTPLinkOptions(opts) {\n    return {\n        url: opts.url.toString().replace(/\\/$/, ''),\n        fetch: opts.fetch,\n        AbortController: getAbortController(opts.AbortController)\n    };\n}\n// https://github.com/trpc/trpc/pull/669\nfunction arrayToDict(array) {\n    const dict = {};\n    for(let index = 0; index < array.length; index++){\n        const element = array[index];\n        dict[index] = element;\n    }\n    return dict;\n}\nconst METHOD = {\n    query: 'GET',\n    mutation: 'POST'\n};\nfunction getInput(opts) {\n    return 'input' in opts ? opts.runtime.transformer.serialize(opts.input) : arrayToDict(opts.inputs.map((_input)=>opts.runtime.transformer.serialize(_input)));\n}\nconst getUrl = (opts)=>{\n    let url = opts.url + '/' + opts.path;\n    const queryParts = [];\n    if ('inputs' in opts) {\n        queryParts.push('batch=1');\n    }\n    if (opts.type === 'query') {\n        const input = getInput(opts);\n        if (input !== undefined) {\n            queryParts.push(`input=${encodeURIComponent(JSON.stringify(input))}`);\n        }\n    }\n    if (queryParts.length) {\n        url += '?' + queryParts.join('&');\n    }\n    return url;\n};\nconst getBody = (opts)=>{\n    if (opts.type === 'query') {\n        return undefined;\n    }\n    const input = getInput(opts);\n    return input !== undefined ? JSON.stringify(input) : undefined;\n};\nconst jsonHttpRequester = (opts)=>{\n    return httpRequest({\n        ...opts,\n        contentTypeHeader: 'application/json',\n        getUrl,\n        getBody\n    });\n};\nasync function fetchHTTPResponse(opts, ac) {\n    const url = opts.getUrl(opts);\n    const body = opts.getBody(opts);\n    const { type } = opts;\n    const resolvedHeaders = await opts.headers();\n    /* istanbul ignore if -- @preserve */ if (type === 'subscription') {\n        throw new Error('Subscriptions should use wsLink');\n    }\n    const headers = {\n        ...opts.contentTypeHeader ? {\n            'content-type': opts.contentTypeHeader\n        } : {},\n        ...opts.batchModeHeader ? {\n            'trpc-batch-mode': opts.batchModeHeader\n        } : {},\n        ...resolvedHeaders\n    };\n    return getFetch(opts.fetch)(url, {\n        method: METHOD[type],\n        signal: ac?.signal,\n        body: body,\n        headers\n    });\n}\nfunction httpRequest(opts) {\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const meta = {};\n    let done = false;\n    const promise = new Promise((resolve, reject)=>{\n        fetchHTTPResponse(opts, ac).then((_res)=>{\n            meta.response = _res;\n            done = true;\n            return _res.json();\n        }).then((json)=>{\n            meta.responseJSON = json;\n            resolve({\n                json: json,\n                meta\n            });\n        }).catch((err)=>{\n            done = true;\n            reject(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_0__.T.from(err, {\n                meta\n            }));\n        });\n    });\n    const cancel = ()=>{\n        if (!done) {\n            ac?.abort();\n        }\n    };\n    return {\n        promise,\n        cancel\n    };\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@trpc/client/dist/index.mjs":
/*!***************************************************!*\
  !*** ../node_modules/@trpc/client/dist/index.mjs ***!
  \***************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T),\n/* harmony export */   TRPCUntypedClient: () => (/* binding */ TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* binding */ clientCallTypeToProcedureType),\n/* harmony export */   createTRPCClient: () => (/* binding */ createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* binding */ createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* binding */ createTRPCProxyClient),\n/* harmony export */   createTRPCUntypedClient: () => (/* binding */ createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.createWSClient),\n/* harmony export */   experimental_formDataLink: () => (/* binding */ experimental_formDataLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.b),\n/* harmony export */   getUntypedClient: () => (/* binding */ getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__.h),\n/* harmony export */   httpLink: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLink),\n/* harmony export */   httpLinkFactory: () => (/* reexport safe */ _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__.loggerLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.s),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* binding */ unstable_httpBatchStreamLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"@trpc/server/observable\");\n/* harmony import */ var _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitLink-4c75f7be.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-38f9a32a.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/shared */ \"@trpc/server/shared\");\n/* harmony import */ var _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./httpUtils-b9d0cb48.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\");\n/* harmony import */ var _httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./httpBatchLink-d0f9eac9.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/httpBatchLink-d0f9eac9.mjs\");\n/* harmony import */ var _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./links/httpLink.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/links/httpLink.mjs\");\n/* harmony import */ var _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./links/loggerLink.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/links/loggerLink.mjs\");\n/* harmony import */ var _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./links/wsLink.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/links/wsLink.mjs\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./transformResult-ace864b8.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__, _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__, _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__, _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__, _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__, _httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__, _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__, _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__, _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__]);\n([_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__, _splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__, _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__, _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__, _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__, _httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__, _links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__, _links_loggerLink_mjs__WEBPACK_IMPORTED_MODULE_7__, _links_wsLink_mjs__WEBPACK_IMPORTED_MODULE_8__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass TRPCUntypedClient {\n    $request({ type, input, path, context = {} }) {\n        const chain$ = (0,_splitLink_4c75f7be_mjs__WEBPACK_IMPORTED_MODULE_1__.c)({\n            links: this.links,\n            op: {\n                id: ++this.requestId,\n                type,\n                path,\n                input,\n                context\n            }\n        });\n        return chain$.pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.share)());\n    }\n    requestAsPromise(opts) {\n        const req$ = this.$request(opts);\n        const { promise, abort } = (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observableToPromise)(req$);\n        const abortablePromise = new Promise((resolve, reject)=>{\n            opts.signal?.addEventListener('abort', abort);\n            promise.then((envelope)=>{\n                resolve(envelope.result.data);\n            }).catch((err)=>{\n                reject(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(err));\n            });\n        });\n        return abortablePromise;\n    }\n    query(path, input, opts) {\n        return this.requestAsPromise({\n            type: 'query',\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    mutation(path, input, opts) {\n        return this.requestAsPromise({\n            type: 'mutation',\n            path,\n            input,\n            context: opts?.context,\n            signal: opts?.signal\n        });\n    }\n    subscription(path, input, opts) {\n        const observable$ = this.$request({\n            type: 'subscription',\n            path,\n            input,\n            context: opts?.context\n        });\n        return observable$.subscribe({\n            next (envelope) {\n                if (envelope.result.type === 'started') {\n                    opts.onStarted?.();\n                } else if (envelope.result.type === 'stopped') {\n                    opts.onStopped?.();\n                } else {\n                    opts.onData?.(envelope.result.data);\n                }\n            },\n            error (err) {\n                opts.onError?.(err);\n            },\n            complete () {\n                opts.onComplete?.();\n            }\n        });\n    }\n    constructor(opts){\n        this.requestId = 0;\n        const combinedTransformer = (()=>{\n            const transformer = opts.transformer;\n            if (!transformer) {\n                return {\n                    input: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    },\n                    output: {\n                        serialize: (data)=>data,\n                        deserialize: (data)=>data\n                    }\n                };\n            }\n            if ('input' in transformer) {\n                return opts.transformer;\n            }\n            return {\n                input: transformer,\n                output: transformer\n            };\n        })();\n        this.runtime = {\n            transformer: {\n                serialize: (data)=>combinedTransformer.input.serialize(data),\n                deserialize: (data)=>combinedTransformer.output.deserialize(data)\n            },\n            combinedTransformer\n        };\n        // Initialize the links\n        this.links = opts.links.map((link)=>link(this.runtime));\n    }\n}\nfunction createTRPCUntypedClient(opts) {\n    return new TRPCUntypedClient(opts);\n}\n/**\n * @deprecated use `createTRPCProxyClient` instead\n */ function createTRPCClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    return client;\n}\nconst clientCallTypeMap = {\n    query: 'query',\n    mutate: 'mutation',\n    subscribe: 'subscription'\n};\n/** @internal */ const clientCallTypeToProcedureType = (clientCallType)=>{\n    return clientCallTypeMap[clientCallType];\n};\n/**\n * @deprecated use `createTRPCProxyClient` instead\n * @internal\n */ function createTRPCClientProxy(client) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createFlatProxy)((key)=>{\n        if (client.hasOwnProperty(key)) {\n            return client[key];\n        }\n        if (key === '__untypedClient') {\n            return client;\n        }\n        return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__.createRecursiveProxy)(({ path, args })=>{\n            const pathCopy = [\n                key,\n                ...path\n            ];\n            const procedureType = clientCallTypeToProcedureType(pathCopy.pop());\n            const fullPath = pathCopy.join('.');\n            return client[procedureType](fullPath, ...args);\n        });\n    });\n}\nfunction createTRPCProxyClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    const proxy = createTRPCClientProxy(client);\n    return proxy;\n}\n/**\n * Get an untyped client from a proxy client\n * @internal\n */ function getUntypedClient(client) {\n    return client.__untypedClient;\n}\nfunction getTextDecoder(customTextDecoder) {\n    if (customTextDecoder) {\n        return customTextDecoder;\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (false) {}\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (typeof globalThis !== 'undefined' && globalThis.TextDecoder) {\n        return new globalThis.TextDecoder();\n    }\n    throw new Error('No TextDecoder implementation found');\n}\n// Stream parsing adapted from https://www.loginradius.com/blog/engineering/guest-post/http-streaming-with-nodejs-and-fetch-api/\n/**\n * @internal\n * @description Take a stream of bytes and call `onLine` with\n * a JSON object for each line in the stream. Expected stream\n * format is:\n * ```json\n * {\"1\": {...}\n * ,\"0\": {...}\n * }\n * ```\n */ async function parseJSONStream(opts) {\n    const parse = opts.parse ?? JSON.parse;\n    const onLine = (line)=>{\n        if (opts.signal?.aborted) return;\n        if (!line || line === '}') {\n            return;\n        }\n        /**\n     * At this point, `line` can be one of two things:\n     * - The first line of the stream `{\"2\":{...}`\n     * - A line in the middle of the stream `,\"2\":{...}`\n     */ const indexOfColon = line.indexOf(':');\n        const indexAsStr = line.substring(2, indexOfColon - 1);\n        const text = line.substring(indexOfColon + 1);\n        opts.onSingle(Number(indexAsStr), parse(text));\n    };\n    await readLines(opts.readableStream, onLine, opts.textDecoder);\n}\n/**\n * Handle transforming a stream of bytes into lines of text.\n * To avoid using AsyncIterators / AsyncGenerators,\n * we use a callback for each line.\n *\n * @param readableStream can be a NodeJS stream or a WebAPI stream\n * @param onLine will be called for every line ('\\n' delimited) in the stream\n */ async function readLines(readableStream, onLine, textDecoder) {\n    let partOfLine = '';\n    const onChunk = (chunk)=>{\n        const chunkText = textDecoder.decode(chunk);\n        const chunkLines = chunkText.split('\\n');\n        if (chunkLines.length === 1) {\n            partOfLine += chunkLines[0];\n        } else if (chunkLines.length > 1) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n            onLine(partOfLine + chunkLines[0]);\n            for(let i = 1; i < chunkLines.length - 1; i++){\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length checked on line above\n                onLine(chunkLines[i]);\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- length doesn't change, so is necessarily > 1\n            partOfLine = chunkLines[chunkLines.length - 1];\n        }\n    };\n    // we handle 2 different types of streams, this if where we figure out which one we have\n    if ('getReader' in readableStream) {\n        await readStandardChunks(readableStream, onChunk);\n    } else {\n        await readNodeChunks(readableStream, onChunk);\n    }\n    onLine(partOfLine);\n}\n/**\n * Handle NodeJS stream\n */ function readNodeChunks(stream, onChunk) {\n    return new Promise((resolve)=>{\n        stream.on('data', onChunk);\n        stream.on('end', resolve);\n    });\n}\n/**\n * Handle WebAPI stream\n */ async function readStandardChunks(stream, onChunk) {\n    const reader = stream.getReader();\n    let readResult = await reader.read();\n    while(!readResult.done){\n        onChunk(readResult.value);\n        readResult = await reader.read();\n    }\n}\nconst streamingJsonHttpRequester = (opts, onSingle)=>{\n    const ac = opts.AbortController ? new opts.AbortController() : null;\n    const responsePromise = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.f)({\n        ...opts,\n        contentTypeHeader: 'application/json',\n        batchModeHeader: 'stream',\n        getUrl: _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.g,\n        getBody: _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.a\n    }, ac);\n    const cancel = ()=>ac?.abort();\n    const promise = responsePromise.then(async (res)=>{\n        if (!res.body) throw new Error('Received response without body');\n        const meta = {\n            response: res\n        };\n        return parseJSONStream({\n            readableStream: res.body,\n            onSingle,\n            parse: (string)=>({\n                    json: JSON.parse(string),\n                    meta\n                }),\n            signal: ac?.signal,\n            textDecoder: opts.textDecoder\n        });\n    });\n    return {\n        cancel,\n        promise\n    };\n};\nconst streamRequester = (requesterOpts)=>{\n    const textDecoder = getTextDecoder(requesterOpts.opts.textDecoder);\n    return (batchOps, unitResolver)=>{\n        const path = batchOps.map((op)=>op.path).join(',');\n        const inputs = batchOps.map((op)=>op.input);\n        const { cancel, promise } = streamingJsonHttpRequester({\n            ...requesterOpts,\n            textDecoder,\n            path,\n            inputs,\n            headers () {\n                if (!requesterOpts.opts.headers) {\n                    return {};\n                }\n                if (typeof requesterOpts.opts.headers === 'function') {\n                    return requesterOpts.opts.headers({\n                        opList: batchOps\n                    });\n                }\n                return requesterOpts.opts.headers;\n            }\n        }, (index, res)=>{\n            unitResolver(index, res);\n        });\n        return {\n            /**\n       * return an empty array because the batchLoader expects an array of results\n       * but we've already called the `unitResolver` for each of them, there's\n       * nothing left to do here.\n       */ promise: promise.then(()=>[]),\n            cancel\n        };\n    };\n};\nconst unstable_httpBatchStreamLink = (0,_httpBatchLink_d0f9eac9_mjs__WEBPACK_IMPORTED_MODULE_5__.c)(streamRequester);\nconst getBody = (opts)=>{\n    if (!('input' in opts)) {\n        return undefined;\n    }\n    if (!(opts.input instanceof FormData)) {\n        throw new Error('Input is not FormData');\n    }\n    return opts.input;\n};\nconst formDataRequester = (opts)=>{\n    if (opts.type !== 'mutation') {\n        // TODO(?) handle formdata queries\n        throw new Error('We only handle mutations with formdata');\n    }\n    return (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_4__.h)({\n        ...opts,\n        getUrl () {\n            return `${opts.url}/${opts.path}`;\n        },\n        getBody\n    });\n};\nconst experimental_formDataLink = (0,_links_httpLink_mjs__WEBPACK_IMPORTED_MODULE_6__.httpLinkFactory)({\n    requester: formDataRequester\n});\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@trpc/client/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@trpc/client/dist/links/httpLink.mjs":
/*!************************************************************!*\
  !*** ../node_modules/@trpc/client/dist/links/httpLink.mjs ***!
  \************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   httpLink: () => (/* binding */ httpLink),\n/* harmony export */   httpLinkFactory: () => (/* binding */ httpLinkFactory)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"@trpc/server/observable\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-38f9a32a.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../httpUtils-b9d0cb48.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/httpUtils-b9d0cb48.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @trpc/server/shared */ \"@trpc/server/shared\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__, _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__, _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__, _trpc_server_shared__WEBPACK_IMPORTED_MODULE_4__]);\n([_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__, _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__, _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__, _trpc_server_shared__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\nfunction httpLinkFactory(factoryOpts) {\n    return (opts)=>{\n        const resolvedOpts = (0,_httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.r)(opts);\n        return (runtime)=>({ op })=>(0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                    const { path, input, type } = op;\n                    const { promise, cancel } = factoryOpts.requester({\n                        ...resolvedOpts,\n                        runtime,\n                        type,\n                        path,\n                        input,\n                        headers () {\n                            if (!opts.headers) {\n                                return {};\n                            }\n                            if (typeof opts.headers === 'function') {\n                                return opts.headers({\n                                    op\n                                });\n                            }\n                            return opts.headers;\n                        }\n                    });\n                    let meta = undefined;\n                    promise.then((res)=>{\n                        meta = res.meta;\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(res.json, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error, {\n                                meta\n                            }));\n                            return;\n                        }\n                        observer.next({\n                            context: res.meta,\n                            result: transformed.result\n                        });\n                        observer.complete();\n                    }).catch((cause)=>{\n                        observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(cause, {\n                            meta\n                        }));\n                    });\n                    return ()=>{\n                        cancel();\n                    };\n                });\n    };\n}\n/**\n * @see https://trpc.io/docs/client/links/httpLink\n */ const httpLink = httpLinkFactory({\n    requester: _httpUtils_b9d0cb48_mjs__WEBPACK_IMPORTED_MODULE_3__.j\n});\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L2xpbmtzL2h0dHBMaW5rLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXFEO0FBQ2tCO0FBQ0E7QUFDeUI7QUFDbkU7QUFFN0IsU0FBU1MsZ0JBQWdCQyxXQUFXO0lBQ2hDLE9BQU8sQ0FBQ0M7UUFDSixNQUFNQyxlQUFlTiwwREFBc0JBLENBQUNLO1FBQzVDLE9BQU8sQ0FBQ0UsVUFBVSxDQUFDLEVBQUVDLEVBQUUsRUFBRyxHQUFHZCxtRUFBVUEsQ0FBQyxDQUFDZTtvQkFDN0IsTUFBTSxFQUFFQyxJQUFJLEVBQUdDLEtBQUssRUFBR0MsSUFBSSxFQUFHLEdBQUdKO29CQUNqQyxNQUFNLEVBQUVLLE9BQU8sRUFBR0MsTUFBTSxFQUFHLEdBQUdWLFlBQVlXLFNBQVMsQ0FBQzt3QkFDaEQsR0FBR1QsWUFBWTt3QkFDZkM7d0JBQ0FLO3dCQUNBRjt3QkFDQUM7d0JBQ0FLOzRCQUNJLElBQUksQ0FBQ1gsS0FBS1csT0FBTyxFQUFFO2dDQUNmLE9BQU8sQ0FBQzs0QkFDWjs0QkFDQSxJQUFJLE9BQU9YLEtBQUtXLE9BQU8sS0FBSyxZQUFZO2dDQUNwQyxPQUFPWCxLQUFLVyxPQUFPLENBQUM7b0NBQ2hCUjtnQ0FDSjs0QkFDSjs0QkFDQSxPQUFPSCxLQUFLVyxPQUFPO3dCQUN2QjtvQkFDSjtvQkFDQSxJQUFJQyxPQUFPQztvQkFDWEwsUUFBUU0sSUFBSSxDQUFDLENBQUNDO3dCQUNWSCxPQUFPRyxJQUFJSCxJQUFJO3dCQUNmLE1BQU1JLGNBQWN6QixnRUFBZUEsQ0FBQ3dCLElBQUlFLElBQUksRUFBRWY7d0JBQzlDLElBQUksQ0FBQ2MsWUFBWUUsRUFBRSxFQUFFOzRCQUNqQmQsU0FBU2UsS0FBSyxDQUFDMUIsNERBQWVBLENBQUMyQixJQUFJLENBQUNKLFlBQVlHLEtBQUssRUFBRTtnQ0FDbkRQOzRCQUNKOzRCQUNBO3dCQUNKO3dCQUNBUixTQUFTaUIsSUFBSSxDQUFDOzRCQUNWQyxTQUFTUCxJQUFJSCxJQUFJOzRCQUNqQlcsUUFBUVAsWUFBWU8sTUFBTTt3QkFDOUI7d0JBQ0FuQixTQUFTb0IsUUFBUTtvQkFDckIsR0FBR0MsS0FBSyxDQUFDLENBQUNDO3dCQUNOdEIsU0FBU2UsS0FBSyxDQUFDMUIsNERBQWVBLENBQUMyQixJQUFJLENBQUNNLE9BQU87NEJBQ3ZDZDt3QkFDSjtvQkFDSjtvQkFDQSxPQUFPO3dCQUNISDtvQkFDSjtnQkFDSjtJQUNaO0FBQ0o7QUFDQTs7Q0FFQyxHQUFHLE1BQU1rQixXQUFXN0IsZ0JBQWdCO0lBQ2pDWSxXQUFXYixzREFBaUJBO0FBQ2hDO0FBRXFDIiwic291cmNlcyI6WyJEOlxcdGVrb2EtZmlyc3RcXHRla29hLXRyYWRpbmdcXG5vZGVfbW9kdWxlc1xcQHRycGNcXGNsaWVudFxcZGlzdFxcbGlua3NcXGh0dHBMaW5rLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBvYnNlcnZhYmxlIH0gZnJvbSAnQHRycGMvc2VydmVyL29ic2VydmFibGUnO1xuaW1wb3J0IHsgdCBhcyB0cmFuc2Zvcm1SZXN1bHQgfSBmcm9tICcuLi90cmFuc2Zvcm1SZXN1bHQtYWNlODY0YjgubWpzJztcbmltcG9ydCB7IFQgYXMgVFJQQ0NsaWVudEVycm9yIH0gZnJvbSAnLi4vVFJQQ0NsaWVudEVycm9yLTM4ZjlhMzJhLm1qcyc7XG5pbXBvcnQgeyByIGFzIHJlc29sdmVIVFRQTGlua09wdGlvbnMsIGogYXMganNvbkh0dHBSZXF1ZXN0ZXIgfSBmcm9tICcuLi9odHRwVXRpbHMtYjlkMGNiNDgubWpzJztcbmltcG9ydCAnQHRycGMvc2VydmVyL3NoYXJlZCc7XG5cbmZ1bmN0aW9uIGh0dHBMaW5rRmFjdG9yeShmYWN0b3J5T3B0cykge1xuICAgIHJldHVybiAob3B0cyk9PntcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRPcHRzID0gcmVzb2x2ZUhUVFBMaW5rT3B0aW9ucyhvcHRzKTtcbiAgICAgICAgcmV0dXJuIChydW50aW1lKT0+KHsgb3AgIH0pPT5vYnNlcnZhYmxlKChvYnNlcnZlcik9PntcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBwYXRoICwgaW5wdXQgLCB0eXBlICB9ID0gb3A7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcHJvbWlzZSAsIGNhbmNlbCAgfSA9IGZhY3RvcnlPcHRzLnJlcXVlc3Rlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5yZXNvbHZlZE9wdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb3B0cy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRzLmhlYWRlcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuaGVhZGVycyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuaGVhZGVycztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtZXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oKHJlcyk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGEgPSByZXMubWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtUmVzdWx0KHJlcy5qc29uLCBydW50aW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdHJhbnNmb3JtZWQub2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5lcnJvcihUUlBDQ2xpZW50RXJyb3IuZnJvbSh0cmFuc2Zvcm1lZC5lcnJvciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHJlcy5tZXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDogdHJhbnNmb3JtZWQucmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChjYXVzZSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKFRSUENDbGllbnRFcnJvci5mcm9tKGNhdXNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICB9O1xufVxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vdHJwYy5pby9kb2NzL2NsaWVudC9saW5rcy9odHRwTGlua1xuICovIGNvbnN0IGh0dHBMaW5rID0gaHR0cExpbmtGYWN0b3J5KHtcbiAgICByZXF1ZXN0ZXI6IGpzb25IdHRwUmVxdWVzdGVyXG59KTtcblxuZXhwb3J0IHsgaHR0cExpbmssIGh0dHBMaW5rRmFjdG9yeSB9O1xuIl0sIm5hbWVzIjpbIm9ic2VydmFibGUiLCJ0IiwidHJhbnNmb3JtUmVzdWx0IiwiVCIsIlRSUENDbGllbnRFcnJvciIsInIiLCJyZXNvbHZlSFRUUExpbmtPcHRpb25zIiwiaiIsImpzb25IdHRwUmVxdWVzdGVyIiwiaHR0cExpbmtGYWN0b3J5IiwiZmFjdG9yeU9wdHMiLCJvcHRzIiwicmVzb2x2ZWRPcHRzIiwicnVudGltZSIsIm9wIiwib2JzZXJ2ZXIiLCJwYXRoIiwiaW5wdXQiLCJ0eXBlIiwicHJvbWlzZSIsImNhbmNlbCIsInJlcXVlc3RlciIsImhlYWRlcnMiLCJtZXRhIiwidW5kZWZpbmVkIiwidGhlbiIsInJlcyIsInRyYW5zZm9ybWVkIiwianNvbiIsIm9rIiwiZXJyb3IiLCJmcm9tIiwibmV4dCIsImNvbnRleHQiLCJyZXN1bHQiLCJjb21wbGV0ZSIsImNhdGNoIiwiY2F1c2UiLCJodHRwTGluayJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@trpc/client/dist/links/httpLink.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@trpc/client/dist/links/loggerLink.mjs":
/*!**************************************************************!*\
  !*** ../node_modules/@trpc/client/dist/links/loggerLink.mjs ***!
  \**************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loggerLink: () => (/* binding */ loggerLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"@trpc/server/observable\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__]);\n_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/// <reference lib=\"dom.iterable\" />\nfunction isFormData(value) {\n    if (typeof FormData === 'undefined') {\n        // FormData is not supported\n        return false;\n    }\n    return value instanceof FormData;\n}\nconst palettes = {\n    css: {\n        query: [\n            '72e3ff',\n            '3fb0d8'\n        ],\n        mutation: [\n            'c5a3fc',\n            '904dfc'\n        ],\n        subscription: [\n            'ff49e1',\n            'd83fbe'\n        ]\n    },\n    ansi: {\n        regular: {\n            // Cyan background, black and white text respectively\n            query: [\n                '\\x1b[30;46m',\n                '\\x1b[97;46m'\n            ],\n            // Magenta background, black and white text respectively\n            mutation: [\n                '\\x1b[30;45m',\n                '\\x1b[97;45m'\n            ],\n            // Green background, black and white text respectively\n            subscription: [\n                '\\x1b[30;42m',\n                '\\x1b[97;42m'\n            ]\n        },\n        bold: {\n            query: [\n                '\\x1b[1;30;46m',\n                '\\x1b[1;97;46m'\n            ],\n            mutation: [\n                '\\x1b[1;30;45m',\n                '\\x1b[1;97;45m'\n            ],\n            subscription: [\n                '\\x1b[1;30;42m',\n                '\\x1b[1;97;42m'\n            ]\n        }\n    }\n};\nfunction constructPartsAndArgs(opts) {\n    const { direction, type, path, id, input } = opts;\n    const parts = [];\n    const args = [];\n    if (opts.colorMode === 'ansi') {\n        const [lightRegular, darkRegular] = palettes.ansi.regular[type];\n        const [lightBold, darkBold] = palettes.ansi.bold[type];\n        const reset = '\\x1b[0m';\n        parts.push(direction === 'up' ? lightRegular : darkRegular, direction === 'up' ? '>>' : '<<', type, direction === 'up' ? lightBold : darkBold, `#${id}`, path, reset);\n        if (direction === 'up') {\n            args.push({\n                input: opts.input\n            });\n        } else {\n            args.push({\n                input: opts.input,\n                // strip context from result cause it's too noisy in terminal wihtout collapse mode\n                result: 'result' in opts.result ? opts.result.result : opts.result,\n                elapsedMs: opts.elapsedMs\n            });\n        }\n        return {\n            parts,\n            args\n        };\n    }\n    const [light, dark] = palettes.css[type];\n    const css = `\n    background-color: #${direction === 'up' ? light : dark}; \n    color: ${direction === 'up' ? 'black' : 'white'};\n    padding: 2px;\n  `;\n    parts.push('%c', direction === 'up' ? '>>' : '<<', type, `#${id}`, `%c${path}%c`, '%O');\n    args.push(css, `${css}; font-weight: bold;`, `${css}; font-weight: normal;`);\n    if (direction === 'up') {\n        args.push({\n            input,\n            context: opts.context\n        });\n    } else {\n        args.push({\n            input,\n            result: opts.result,\n            elapsedMs: opts.elapsedMs,\n            context: opts.context\n        });\n    }\n    return {\n        parts,\n        args\n    };\n}\n// maybe this should be moved to it's own package\nconst defaultLogger = ({ c = console, colorMode = 'css' })=>(props)=>{\n        const rawInput = props.input;\n        const input = isFormData(rawInput) ? Object.fromEntries(rawInput) : rawInput;\n        const { parts, args } = constructPartsAndArgs({\n            ...props,\n            colorMode,\n            input\n        });\n        const fn = props.direction === 'down' && props.result && (props.result instanceof Error || 'error' in props.result.result) ? 'error' : 'log';\n        c[fn].apply(null, [\n            parts.join(' ')\n        ].concat(args));\n    };\n/**\n * @see https://trpc.io/docs/client/links/loggerLink\n */ function loggerLink(opts = {}) {\n    const { enabled = ()=>true } = opts;\n    const colorMode = opts.colorMode ?? ( true ? 'ansi' : 0);\n    const { logger = defaultLogger({\n        c: opts.console,\n        colorMode\n    }) } = opts;\n    return ()=>{\n        return ({ op, next })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                // ->\n                enabled({\n                    ...op,\n                    direction: 'up'\n                }) && logger({\n                    ...op,\n                    direction: 'up'\n                });\n                const requestStartTime = Date.now();\n                function logResult(result) {\n                    const elapsedMs = Date.now() - requestStartTime;\n                    enabled({\n                        ...op,\n                        direction: 'down',\n                        result\n                    }) && logger({\n                        ...op,\n                        direction: 'down',\n                        elapsedMs,\n                        result\n                    });\n                }\n                return next(op).pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.tap)({\n                    next (result) {\n                        logResult(result);\n                    },\n                    error (result) {\n                        logResult(result);\n                    }\n                })).subscribe(observer);\n            });\n        };\n    };\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@trpc/client/dist/links/loggerLink.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@trpc/client/dist/links/wsLink.mjs":
/*!**********************************************************!*\
  !*** ../node_modules/@trpc/client/dist/links/wsLink.mjs ***!
  \**********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createWSClient: () => (/* binding */ createWSClient),\n/* harmony export */   wsLink: () => (/* binding */ wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"@trpc/server/observable\");\n/* harmony import */ var _transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../transformResult-ace864b8.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\");\n/* harmony import */ var _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../TRPCClientError-38f9a32a.mjs */ \"(ssr)/../node_modules/@trpc/client/dist/TRPCClientError-38f9a32a.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/shared */ \"@trpc/server/shared\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__, _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__, _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__]);\n([_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__, _TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__, _trpc_server_shared__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n/* istanbul ignore next -- @preserve */ const retryDelay = (attemptIndex)=>attemptIndex === 0 ? 0 : Math.min(1000 * 2 ** attemptIndex, 30000);\nfunction createWSClient(opts) {\n    const { url, WebSocket: WebSocketImpl = WebSocket, retryDelayMs: retryDelayFn = retryDelay, onOpen, onClose } = opts;\n    /* istanbul ignore next -- @preserve */ if (!WebSocketImpl) {\n        throw new Error(\"No WebSocket implementation found - you probably don't want to use this on the server, but if you do you need to pass a `WebSocket`-ponyfill\");\n    }\n    /**\n   * outgoing messages buffer whilst not open\n   */ let outgoing = [];\n    const pendingRequests = Object.create(null);\n    let connectAttempt = 0;\n    let dispatchTimer = null;\n    let connectTimer = null;\n    let activeConnection = createWS();\n    let state = 'connecting';\n    /**\n   * tries to send the list of messages\n   */ function dispatch() {\n        if (state !== 'open' || dispatchTimer) {\n            return;\n        }\n        dispatchTimer = setTimeout(()=>{\n            dispatchTimer = null;\n            if (outgoing.length === 1) {\n                // single send\n                activeConnection.send(JSON.stringify(outgoing.pop()));\n            } else {\n                // batch send\n                activeConnection.send(JSON.stringify(outgoing));\n            }\n            // clear\n            outgoing = [];\n        });\n    }\n    function tryReconnect() {\n        if (connectTimer !== null || state === 'closed') {\n            return;\n        }\n        const timeout = retryDelayFn(connectAttempt++);\n        reconnectInMs(timeout);\n    }\n    function reconnect() {\n        state = 'connecting';\n        const oldConnection = activeConnection;\n        activeConnection = createWS();\n        closeIfNoPending(oldConnection);\n    }\n    function reconnectInMs(ms) {\n        if (connectTimer) {\n            return;\n        }\n        state = 'connecting';\n        connectTimer = setTimeout(reconnect, ms);\n    }\n    function closeIfNoPending(conn) {\n        // disconnect as soon as there are are no pending result\n        const hasPendingRequests = Object.values(pendingRequests).some((p)=>p.ws === conn);\n        if (!hasPendingRequests) {\n            conn.close();\n        }\n    }\n    function closeActiveSubscriptions() {\n        Object.values(pendingRequests).forEach((req)=>{\n            if (req.type === 'subscription') {\n                req.callbacks.complete();\n            }\n        });\n    }\n    function resumeSubscriptionOnReconnect(req) {\n        if (outgoing.some((r)=>r.id === req.op.id)) {\n            return;\n        }\n        request(req.op, req.callbacks);\n    }\n    function createWS() {\n        const urlString = typeof url === 'function' ? url() : url;\n        const conn = new WebSocketImpl(urlString);\n        clearTimeout(connectTimer);\n        connectTimer = null;\n        conn.addEventListener('open', ()=>{\n            /* istanbul ignore next -- @preserve */ if (conn !== activeConnection) {\n                return;\n            }\n            connectAttempt = 0;\n            state = 'open';\n            onOpen?.();\n            dispatch();\n        });\n        conn.addEventListener('error', ()=>{\n            if (conn === activeConnection) {\n                tryReconnect();\n            }\n        });\n        const handleIncomingRequest = (req)=>{\n            if (req.method === 'reconnect' && conn === activeConnection) {\n                if (state === 'open') {\n                    onClose?.();\n                }\n                reconnect();\n                // notify subscribers\n                for (const pendingReq of Object.values(pendingRequests)){\n                    if (pendingReq.type === 'subscription') {\n                        resumeSubscriptionOnReconnect(pendingReq);\n                    }\n                }\n            }\n        };\n        const handleIncomingResponse = (data)=>{\n            const req = data.id !== null && pendingRequests[data.id];\n            if (!req) {\n                // do something?\n                return;\n            }\n            req.callbacks.next?.(data);\n            if (req.ws !== activeConnection && conn === activeConnection) {\n                const oldWs = req.ws;\n                // gracefully replace old connection with this\n                req.ws = activeConnection;\n                closeIfNoPending(oldWs);\n            }\n            if ('result' in data && data.result.type === 'stopped' && conn === activeConnection) {\n                req.callbacks.complete();\n            }\n        };\n        conn.addEventListener('message', ({ data })=>{\n            const msg = JSON.parse(data);\n            if ('method' in msg) {\n                handleIncomingRequest(msg);\n            } else {\n                handleIncomingResponse(msg);\n            }\n            if (conn !== activeConnection || state === 'closed') {\n                // when receiving a message, we close old connection that has no pending requests\n                closeIfNoPending(conn);\n            }\n        });\n        conn.addEventListener('close', ({ code })=>{\n            if (state === 'open') {\n                onClose?.({\n                    code\n                });\n            }\n            if (activeConnection === conn) {\n                // connection might have been replaced already\n                tryReconnect();\n            }\n            for (const [key, req] of Object.entries(pendingRequests)){\n                if (req.ws !== conn) {\n                    continue;\n                }\n                if (state === 'closed') {\n                    // If the connection was closed, we just call `complete()` on the request\n                    delete pendingRequests[key];\n                    req.callbacks.complete?.();\n                    continue;\n                }\n                // The connection was closed either unexpectedly or because of a reconnect\n                if (req.type === 'subscription') {\n                    // Subscriptions will resume after we've reconnected\n                    resumeSubscriptionOnReconnect(req);\n                } else {\n                    // Queries and mutations will error if interrupted\n                    delete pendingRequests[key];\n                    req.callbacks.error?.(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(new TRPCWebSocketClosedError('WebSocket closed prematurely')));\n                }\n            }\n        });\n        return conn;\n    }\n    function request(op, callbacks) {\n        const { type, input, path, id } = op;\n        const envelope = {\n            id,\n            method: type,\n            params: {\n                input,\n                path\n            }\n        };\n        pendingRequests[id] = {\n            ws: activeConnection,\n            type,\n            callbacks,\n            op\n        };\n        // enqueue message\n        outgoing.push(envelope);\n        dispatch();\n        return ()=>{\n            const callbacks = pendingRequests[id]?.callbacks;\n            delete pendingRequests[id];\n            outgoing = outgoing.filter((msg)=>msg.id !== id);\n            callbacks?.complete?.();\n            if (activeConnection.readyState === WebSocketImpl.OPEN && op.type === 'subscription') {\n                outgoing.push({\n                    id,\n                    method: 'subscription.stop'\n                });\n                dispatch();\n            }\n        };\n    }\n    return {\n        close: ()=>{\n            state = 'closed';\n            onClose?.();\n            closeActiveSubscriptions();\n            closeIfNoPending(activeConnection);\n            clearTimeout(connectTimer);\n            connectTimer = null;\n        },\n        request,\n        getConnection () {\n            return activeConnection;\n        }\n    };\n}\nclass TRPCWebSocketClosedError extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'TRPCWebSocketClosedError';\n        Object.setPrototypeOf(this, TRPCWebSocketClosedError.prototype);\n    }\n}\n/**\n * @see https://trpc.io/docs/client/links/wsLink\n */ function wsLink(opts) {\n    return (runtime)=>{\n        const { client } = opts;\n        return ({ op })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const { type, path, id, context } = op;\n                const input = runtime.transformer.serialize(op.input);\n                const unsub = client.request({\n                    type,\n                    path,\n                    input,\n                    id,\n                    context\n                }, {\n                    error (err) {\n                        observer.error(err);\n                        unsub();\n                    },\n                    complete () {\n                        observer.complete();\n                    },\n                    next (message) {\n                        const transformed = (0,_transformResult_ace864b8_mjs__WEBPACK_IMPORTED_MODULE_1__.t)(message, runtime);\n                        if (!transformed.ok) {\n                            observer.error(_TRPCClientError_38f9a32a_mjs__WEBPACK_IMPORTED_MODULE_2__.T.from(transformed.error));\n                            return;\n                        }\n                        observer.next({\n                            result: transformed.result\n                        });\n                        if (op.type !== 'subscription') {\n                            // if it isn't a subscription we don't care about next response\n                            unsub();\n                            observer.complete();\n                        }\n                    }\n                });\n                return ()=>{\n                    unsub();\n                };\n            });\n        };\n    };\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@trpc/client/dist/links/wsLink.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs":
/*!****************************************************************!*\
  !*** ../node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs ***!
  \****************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createChain),\n/* harmony export */   s: () => (/* binding */ splitLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"@trpc/server/observable\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__]);\n_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/** @internal */ function createChain(opts) {\n    return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n        function execute(index = 0, op = opts.op) {\n            const next = opts.links[index];\n            if (!next) {\n                throw new Error('No more links to execute - did you forget to add an ending link?');\n            }\n            const subscription = next({\n                op,\n                next (nextOp) {\n                    const nextObserver = execute(index + 1, nextOp);\n                    return nextObserver;\n                }\n            });\n            return subscription;\n        }\n        const obs$ = execute();\n        return obs$.subscribe(observer);\n    });\n}\nfunction asArray(value) {\n    return Array.isArray(value) ? value : [\n        value\n    ];\n}\nfunction splitLink(opts) {\n    return (runtime)=>{\n        const yes = asArray(opts.true).map((link)=>link(runtime));\n        const no = asArray(opts.false).map((link)=>link(runtime));\n        return (props)=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const links = opts.condition(props.op) ? yes : no;\n                return createChain({\n                    op: props.op,\n                    links\n                }).subscribe(observer);\n            });\n        };\n    };\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L3NwbGl0TGluay00Yzc1ZjdiZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXFEO0FBRXJELGNBQWMsR0FBRyxTQUFTQyxZQUFZQyxJQUFJO0lBQ3RDLE9BQU9GLG1FQUFVQSxDQUFDLENBQUNHO1FBQ2YsU0FBU0MsUUFBUUMsUUFBUSxDQUFDLEVBQUVDLEtBQUtKLEtBQUtJLEVBQUU7WUFDcEMsTUFBTUMsT0FBT0wsS0FBS00sS0FBSyxDQUFDSCxNQUFNO1lBQzlCLElBQUksQ0FBQ0UsTUFBTTtnQkFDUCxNQUFNLElBQUlFLE1BQU07WUFDcEI7WUFDQSxNQUFNQyxlQUFlSCxLQUFLO2dCQUN0QkQ7Z0JBQ0FDLE1BQU1JLE1BQU07b0JBQ1IsTUFBTUMsZUFBZVIsUUFBUUMsUUFBUSxHQUFHTTtvQkFDeEMsT0FBT0M7Z0JBQ1g7WUFDSjtZQUNBLE9BQU9GO1FBQ1g7UUFDQSxNQUFNRyxPQUFPVDtRQUNiLE9BQU9TLEtBQUtDLFNBQVMsQ0FBQ1g7SUFDMUI7QUFDSjtBQUVBLFNBQVNZLFFBQVFDLEtBQUs7SUFDbEIsT0FBT0MsTUFBTUMsT0FBTyxDQUFDRixTQUFTQSxRQUFRO1FBQ2xDQTtLQUNIO0FBQ0w7QUFDQSxTQUFTRyxVQUFVakIsSUFBSTtJQUNuQixPQUFPLENBQUNrQjtRQUNKLE1BQU1DLE1BQU1OLFFBQVFiLEtBQUtvQixJQUFJLEVBQUVDLEdBQUcsQ0FBQyxDQUFDQyxPQUFPQSxLQUFLSjtRQUNoRCxNQUFNSyxLQUFLVixRQUFRYixLQUFLd0IsS0FBSyxFQUFFSCxHQUFHLENBQUMsQ0FBQ0MsT0FBT0EsS0FBS0o7UUFDaEQsT0FBTyxDQUFDTztZQUNKLE9BQU8zQixtRUFBVUEsQ0FBQyxDQUFDRztnQkFDZixNQUFNSyxRQUFRTixLQUFLMEIsU0FBUyxDQUFDRCxNQUFNckIsRUFBRSxJQUFJZSxNQUFNSTtnQkFDL0MsT0FBT3hCLFlBQVk7b0JBQ2ZLLElBQUlxQixNQUFNckIsRUFBRTtvQkFDWkU7Z0JBQ0osR0FBR00sU0FBUyxDQUFDWDtZQUNqQjtRQUNKO0lBQ0o7QUFDSjtBQUU0QyIsInNvdXJjZXMiOlsiRDpcXHRla29hLWZpcnN0XFx0ZWtvYS10cmFkaW5nXFxub2RlX21vZHVsZXNcXEB0cnBjXFxjbGllbnRcXGRpc3RcXHNwbGl0TGluay00Yzc1ZjdiZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb2JzZXJ2YWJsZSB9IGZyb20gJ0B0cnBjL3NlcnZlci9vYnNlcnZhYmxlJztcblxuLyoqIEBpbnRlcm5hbCAqLyBmdW5jdGlvbiBjcmVhdGVDaGFpbihvcHRzKSB7XG4gICAgcmV0dXJuIG9ic2VydmFibGUoKG9ic2VydmVyKT0+e1xuICAgICAgICBmdW5jdGlvbiBleGVjdXRlKGluZGV4ID0gMCwgb3AgPSBvcHRzLm9wKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gb3B0cy5saW5rc1tpbmRleF07XG4gICAgICAgICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG1vcmUgbGlua3MgdG8gZXhlY3V0ZSAtIGRpZCB5b3UgZm9yZ2V0IHRvIGFkZCBhbiBlbmRpbmcgbGluaz8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IG5leHQoe1xuICAgICAgICAgICAgICAgIG9wLFxuICAgICAgICAgICAgICAgIG5leHQgKG5leHRPcCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0T2JzZXJ2ZXIgPSBleGVjdXRlKGluZGV4ICsgMSwgbmV4dE9wKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHRPYnNlcnZlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2JzJCA9IGV4ZWN1dGUoKTtcbiAgICAgICAgcmV0dXJuIG9icyQuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYXNBcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW1xuICAgICAgICB2YWx1ZVxuICAgIF07XG59XG5mdW5jdGlvbiBzcGxpdExpbmsob3B0cykge1xuICAgIHJldHVybiAocnVudGltZSk9PntcbiAgICAgICAgY29uc3QgeWVzID0gYXNBcnJheShvcHRzLnRydWUpLm1hcCgobGluayk9PmxpbmsocnVudGltZSkpO1xuICAgICAgICBjb25zdCBubyA9IGFzQXJyYXkob3B0cy5mYWxzZSkubWFwKChsaW5rKT0+bGluayhydW50aW1lKSk7XG4gICAgICAgIHJldHVybiAocHJvcHMpPT57XG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZSgob2JzZXJ2ZXIpPT57XG4gICAgICAgICAgICAgICAgY29uc3QgbGlua3MgPSBvcHRzLmNvbmRpdGlvbihwcm9wcy5vcCkgPyB5ZXMgOiBubztcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ2hhaW4oe1xuICAgICAgICAgICAgICAgICAgICBvcDogcHJvcHMub3AsXG4gICAgICAgICAgICAgICAgICAgIGxpbmtzXG4gICAgICAgICAgICAgICAgfSkuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUNoYWluIGFzIGMsIHNwbGl0TGluayBhcyBzIH07XG4iXSwibmFtZXMiOlsib2JzZXJ2YWJsZSIsImNyZWF0ZUNoYWluIiwib3B0cyIsIm9ic2VydmVyIiwiZXhlY3V0ZSIsImluZGV4Iiwib3AiLCJuZXh0IiwibGlua3MiLCJFcnJvciIsInN1YnNjcmlwdGlvbiIsIm5leHRPcCIsIm5leHRPYnNlcnZlciIsIm9icyQiLCJzdWJzY3JpYmUiLCJhc0FycmF5IiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJzcGxpdExpbmsiLCJydW50aW1lIiwieWVzIiwidHJ1ZSIsIm1hcCIsImxpbmsiLCJubyIsImZhbHNlIiwicHJvcHMiLCJjb25kaXRpb24iLCJjIiwicyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@trpc/client/dist/splitLink-4c75f7be.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs":
/*!**********************************************************************!*\
  !*** ../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   i: () => (/* binding */ isObject),\n/* harmony export */   t: () => (/* binding */ transformResult)\n/* harmony export */ });\nfunction isObject(value) {\n    // check that value is object\n    return !!value && !Array.isArray(value) && typeof value === 'object';\n}\n// FIXME:\n// - the generics here are probably unnecessary\n// - the RPC-spec could probably be simplified to combine HTTP + WS\n/** @internal */ function transformResultInner(response, runtime) {\n    if ('error' in response) {\n        const error = runtime.transformer.deserialize(response.error);\n        return {\n            ok: false,\n            error: {\n                ...response,\n                error\n            }\n        };\n    }\n    const result = {\n        ...response.result,\n        ...(!response.result.type || response.result.type === 'data') && {\n            type: 'data',\n            data: runtime.transformer.deserialize(response.result.data)\n        }\n    };\n    return {\n        ok: true,\n        result\n    };\n}\nclass TransformResultError extends Error {\n    constructor(){\n        super('Unable to transform response from server');\n    }\n}\n/**\n * Transforms and validates that the result is a valid TRPCResponse\n * @internal\n */ function transformResult(response, runtime) {\n    let result;\n    try {\n        // Use the data transformers on the JSON-response\n        result = transformResultInner(response, runtime);\n    } catch (err) {\n        throw new TransformResultError();\n    }\n    // check that output of the transformers is a valid TRPCResponse\n    if (!result.ok && (!isObject(result.error.error) || typeof result.error.error.code !== 'number')) {\n        throw new TransformResultError();\n    }\n    if (result.ok && !isObject(result.result)) {\n        throw new TransformResultError();\n    }\n    return result;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0cnBjL2NsaWVudC9kaXN0L3RyYW5zZm9ybVJlc3VsdC1hY2U4NjRiOC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxTQUFTQyxLQUFLO0lBQ25CLDZCQUE2QjtJQUM3QixPQUFPLENBQUMsQ0FBQ0EsU0FBUyxDQUFDQyxNQUFNQyxPQUFPLENBQUNGLFVBQVUsT0FBT0EsVUFBVTtBQUNoRTtBQUVBLFNBQVM7QUFDVCwrQ0FBK0M7QUFDL0MsbUVBQW1FO0FBQ25FLGNBQWMsR0FBRyxTQUFTRyxxQkFBcUJDLFFBQVEsRUFBRUMsT0FBTztJQUM1RCxJQUFJLFdBQVdELFVBQVU7UUFDckIsTUFBTUUsUUFBUUQsUUFBUUUsV0FBVyxDQUFDQyxXQUFXLENBQUNKLFNBQVNFLEtBQUs7UUFDNUQsT0FBTztZQUNIRyxJQUFJO1lBQ0pILE9BQU87Z0JBQ0gsR0FBR0YsUUFBUTtnQkFDWEU7WUFDSjtRQUNKO0lBQ0o7SUFDQSxNQUFNSSxTQUFTO1FBQ1gsR0FBR04sU0FBU00sTUFBTTtRQUNsQixHQUFHLENBQUMsQ0FBQ04sU0FBU00sTUFBTSxDQUFDQyxJQUFJLElBQUlQLFNBQVNNLE1BQU0sQ0FBQ0MsSUFBSSxLQUFLLE1BQUssS0FBTTtZQUM3REEsTUFBTTtZQUNOQyxNQUFNUCxRQUFRRSxXQUFXLENBQUNDLFdBQVcsQ0FBQ0osU0FBU00sTUFBTSxDQUFDRSxJQUFJO1FBQzlELENBQUM7SUFDTDtJQUNBLE9BQU87UUFDSEgsSUFBSTtRQUNKQztJQUNKO0FBQ0o7QUFDQSxNQUFNRyw2QkFBNkJDO0lBQy9CQyxhQUFhO1FBQ1QsS0FBSyxDQUFDO0lBQ1Y7QUFDSjtBQUNBOzs7Q0FHQyxHQUFHLFNBQVNDLGdCQUFnQlosUUFBUSxFQUFFQyxPQUFPO0lBQzFDLElBQUlLO0lBQ0osSUFBSTtRQUNBLGlEQUFpRDtRQUNqREEsU0FBU1AscUJBQXFCQyxVQUFVQztJQUM1QyxFQUFFLE9BQU9ZLEtBQUs7UUFDVixNQUFNLElBQUlKO0lBQ2Q7SUFDQSxnRUFBZ0U7SUFDaEUsSUFBSSxDQUFDSCxPQUFPRCxFQUFFLElBQUssRUFBQ1YsU0FBU1csT0FBT0osS0FBSyxDQUFDQSxLQUFLLEtBQUssT0FBT0ksT0FBT0osS0FBSyxDQUFDQSxLQUFLLENBQUNZLElBQUksS0FBSyxRQUFPLEdBQUk7UUFDOUYsTUFBTSxJQUFJTDtJQUNkO0lBQ0EsSUFBSUgsT0FBT0QsRUFBRSxJQUFJLENBQUNWLFNBQVNXLE9BQU9BLE1BQU0sR0FBRztRQUN2QyxNQUFNLElBQUlHO0lBQ2Q7SUFDQSxPQUFPSDtBQUNYO0FBRStDIiwic291cmNlcyI6WyJEOlxcdGVrb2EtZmlyc3RcXHRla29hLXRyYWRpbmdcXG5vZGVfbW9kdWxlc1xcQHRycGNcXGNsaWVudFxcZGlzdFxcdHJhbnNmb3JtUmVzdWx0LWFjZTg2NGI4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIC8vIGNoZWNrIHRoYXQgdmFsdWUgaXMgb2JqZWN0XG4gICAgcmV0dXJuICEhdmFsdWUgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cbi8vIEZJWE1FOlxuLy8gLSB0aGUgZ2VuZXJpY3MgaGVyZSBhcmUgcHJvYmFibHkgdW5uZWNlc3Nhcnlcbi8vIC0gdGhlIFJQQy1zcGVjIGNvdWxkIHByb2JhYmx5IGJlIHNpbXBsaWZpZWQgdG8gY29tYmluZSBIVFRQICsgV1Ncbi8qKiBAaW50ZXJuYWwgKi8gZnVuY3Rpb24gdHJhbnNmb3JtUmVzdWx0SW5uZXIocmVzcG9uc2UsIHJ1bnRpbWUpIHtcbiAgICBpZiAoJ2Vycm9yJyBpbiByZXNwb25zZSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IHJ1bnRpbWUudHJhbnNmb3JtZXIuZGVzZXJpYWxpemUocmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb2s6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IHtcbiAgICAgICAgICAgICAgICAuLi5yZXNwb25zZSxcbiAgICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIC4uLnJlc3BvbnNlLnJlc3VsdCxcbiAgICAgICAgLi4uKCFyZXNwb25zZS5yZXN1bHQudHlwZSB8fCByZXNwb25zZS5yZXN1bHQudHlwZSA9PT0gJ2RhdGEnKSAmJiB7XG4gICAgICAgICAgICB0eXBlOiAnZGF0YScsXG4gICAgICAgICAgICBkYXRhOiBydW50aW1lLnRyYW5zZm9ybWVyLmRlc2VyaWFsaXplKHJlc3BvbnNlLnJlc3VsdC5kYXRhKVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgcmVzdWx0XG4gICAgfTtcbn1cbmNsYXNzIFRyYW5zZm9ybVJlc3VsdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCdVbmFibGUgdG8gdHJhbnNmb3JtIHJlc3BvbnNlIGZyb20gc2VydmVyJyk7XG4gICAgfVxufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIGFuZCB2YWxpZGF0ZXMgdGhhdCB0aGUgcmVzdWx0IGlzIGEgdmFsaWQgVFJQQ1Jlc3BvbnNlXG4gKiBAaW50ZXJuYWxcbiAqLyBmdW5jdGlvbiB0cmFuc2Zvcm1SZXN1bHQocmVzcG9uc2UsIHJ1bnRpbWUpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICAgIC8vIFVzZSB0aGUgZGF0YSB0cmFuc2Zvcm1lcnMgb24gdGhlIEpTT04tcmVzcG9uc2VcbiAgICAgICAgcmVzdWx0ID0gdHJhbnNmb3JtUmVzdWx0SW5uZXIocmVzcG9uc2UsIHJ1bnRpbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgVHJhbnNmb3JtUmVzdWx0RXJyb3IoKTtcbiAgICB9XG4gICAgLy8gY2hlY2sgdGhhdCBvdXRwdXQgb2YgdGhlIHRyYW5zZm9ybWVycyBpcyBhIHZhbGlkIFRSUENSZXNwb25zZVxuICAgIGlmICghcmVzdWx0Lm9rICYmICghaXNPYmplY3QocmVzdWx0LmVycm9yLmVycm9yKSB8fCB0eXBlb2YgcmVzdWx0LmVycm9yLmVycm9yLmNvZGUgIT09ICdudW1iZXInKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHJhbnNmb3JtUmVzdWx0RXJyb3IoKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5vayAmJiAhaXNPYmplY3QocmVzdWx0LnJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRyYW5zZm9ybVJlc3VsdEVycm9yKCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCB7IGlzT2JqZWN0IGFzIGksIHRyYW5zZm9ybVJlc3VsdCBhcyB0IH07XG4iXSwibmFtZXMiOlsiaXNPYmplY3QiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsInRyYW5zZm9ybVJlc3VsdElubmVyIiwicmVzcG9uc2UiLCJydW50aW1lIiwiZXJyb3IiLCJ0cmFuc2Zvcm1lciIsImRlc2VyaWFsaXplIiwib2siLCJyZXN1bHQiLCJ0eXBlIiwiZGF0YSIsIlRyYW5zZm9ybVJlc3VsdEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInRyYW5zZm9ybVJlc3VsdCIsImVyciIsImNvZGUiLCJpIiwidCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@trpc/client/dist/transformResult-ace864b8.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@trpc/react-query/dist/createHooksInternal-063195fc.mjs":
/*!*******************************************************************************!*\
  !*** ../node_modules/@trpc/react-query/dist/createHooksInternal-063195fc.mjs ***!
  \*******************************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ TRPCContext),\n/* harmony export */   a: () => (/* binding */ createReactQueryUtilsProxy),\n/* harmony export */   b: () => (/* binding */ createReactProxyDecoration),\n/* harmony export */   c: () => (/* binding */ createHooksInternal),\n/* harmony export */   d: () => (/* binding */ getClientArgs),\n/* harmony export */   e: () => (/* binding */ createUseQueriesProxy),\n/* harmony export */   f: () => (/* binding */ createRootHooks),\n/* harmony export */   g: () => (/* binding */ getQueryKey),\n/* harmony export */   h: () => (/* binding */ contextProps)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/shared */ \"@trpc/server/shared\");\n/* harmony import */ var _getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getArrayQueryKey-86134f8b.mjs */ \"(ssr)/../node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs\");\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @trpc/client */ \"(ssr)/../node_modules/@trpc/client/dist/index.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/react-query/build/lib/useQuery.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/react-query/build/lib/useMutation.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../node_modules/@tanstack/react-query/build/lib/useQueries.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__, _trpc_client__WEBPACK_IMPORTED_MODULE_2__]);\n([_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__, _trpc_client__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n/**\n * We treat `undefined` as an input the same as omitting an `input`\n * https://github.com/trpc/trpc/issues/2290\n */ function getQueryKeyInternal(path, input) {\n    if (path.length) return input === undefined ? [\n        path\n    ] : [\n        path,\n        input\n    ];\n    return [];\n}\n/**\n * Method to extract the query key for a procedure\n * @param procedureOrRouter - procedure or AnyRouter\n * @param input - input to procedureOrRouter\n * @param type - defaults to `any`\n * @link https://trpc.io/docs/getQueryKey\n */ function getQueryKey(..._params) {\n    const [procedureOrRouter, input, type] = _params;\n    // @ts-expect-error - we don't expose _def on the type layer\n    const path = procedureOrRouter._def().path;\n    const dotPath = path.join('.');\n    const queryKey = (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(getQueryKeyInternal(dotPath, input), type ?? 'any');\n    return queryKey;\n}\n/**\n * Create proxy for decorating procedures\n * @internal\n */ function createReactProxyDecoration(name, hooks) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)((opts)=>{\n        const args = opts.args;\n        const pathCopy = [\n            name,\n            ...opts.path\n        ];\n        // The last arg is for instance `.useMutation` or `.useQuery()`\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const lastArg = pathCopy.pop();\n        // The `path` ends up being something like `post.byId`\n        const path = pathCopy.join('.');\n        if (lastArg === 'useMutation') {\n            return hooks[lastArg](path, ...args);\n        }\n        const [input, ...rest] = args;\n        const queryKey = getQueryKeyInternal(path, input);\n        // Expose queryKey helper\n        if (lastArg === 'getQueryKey') {\n            return (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, rest[0] ?? 'any');\n        }\n        if (lastArg === '_def') {\n            return {\n                path: pathCopy\n            };\n        }\n        if (lastArg.startsWith('useSuspense')) {\n            const opts1 = rest[0] || {};\n            const fn = lastArg === 'useSuspenseQuery' ? 'useQuery' : 'useInfiniteQuery';\n            const result = hooks[fn](queryKey, {\n                ...opts1,\n                suspense: true,\n                enabled: true\n            });\n            return [\n                result.data,\n                result\n            ];\n        }\n        return hooks[lastArg](queryKey, ...rest);\n    });\n}\nconst contextProps = [\n    'client',\n    'ssrContext',\n    'ssrState',\n    'abortOnUnmount'\n];\nconst TRPCContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_3__.createContext)(null);\n/**\n * @internal\n */ function createReactQueryUtilsProxy(context) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createFlatProxy)((key)=>{\n        const contextName = key;\n        if (contextName === 'client') {\n            return (0,_trpc_client__WEBPACK_IMPORTED_MODULE_2__.createTRPCClientProxy)(context.client);\n        }\n        if (contextProps.includes(contextName)) {\n            return context[contextName];\n        }\n        return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)(({ path, args })=>{\n            const pathCopy = [\n                key,\n                ...path\n            ];\n            const utilName = pathCopy.pop();\n            const fullPath = pathCopy.join('.');\n            const getOpts = (name)=>{\n                if ([\n                    'setData',\n                    'setInfiniteData'\n                ].includes(name)) {\n                    const [input, updater, ...rest] = args;\n                    const queryKey = getQueryKeyInternal(fullPath, input);\n                    return {\n                        queryKey,\n                        updater,\n                        rest\n                    };\n                }\n                const [input1, ...rest1] = args;\n                const queryKey1 = getQueryKeyInternal(fullPath, input1);\n                return {\n                    queryKey: queryKey1,\n                    rest: rest1\n                };\n            };\n            const { queryKey, rest, updater } = getOpts(utilName);\n            const contextMap = {\n                fetch: ()=>context.fetchQuery(queryKey, ...rest),\n                fetchInfinite: ()=>context.fetchInfiniteQuery(queryKey, ...rest),\n                prefetch: ()=>context.prefetchQuery(queryKey, ...rest),\n                prefetchInfinite: ()=>context.prefetchInfiniteQuery(queryKey, ...rest),\n                ensureData: ()=>context.ensureQueryData(queryKey, ...rest),\n                invalidate: ()=>context.invalidateQueries(queryKey, ...rest),\n                reset: ()=>context.resetQueries(queryKey, ...rest),\n                refetch: ()=>context.refetchQueries(queryKey, ...rest),\n                cancel: ()=>context.cancelQuery(queryKey, ...rest),\n                setData: ()=>{\n                    context.setQueryData(queryKey, updater, ...rest);\n                },\n                setInfiniteData: ()=>{\n                    context.setInfiniteQueryData(queryKey, updater, ...rest);\n                },\n                getData: ()=>context.getQueryData(queryKey),\n                getInfiniteData: ()=>context.getInfiniteQueryData(queryKey)\n            };\n            return contextMap[utilName]();\n        });\n    });\n}\n/**\n * Create proxy for `useQueries` options\n * @internal\n */ function createUseQueriesProxy(client) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)((opts)=>{\n        const path = opts.path.join('.');\n        const [input, _opts] = opts.args;\n        const queryKey = getQueryKeyInternal(path, input);\n        const options = {\n            queryKey,\n            queryFn: ()=>{\n                return client.query(path, input, _opts?.trpc);\n            },\n            ..._opts\n        };\n        return options;\n    });\n}\nfunction getClientArgs(pathAndInput, opts) {\n    const [path, input] = pathAndInput;\n    return [\n        path,\n        input,\n        opts?.trpc\n    ];\n}\n/**\n * Makes a stable reference of the `trpc` prop\n */ function useHookResult(value) {\n    const { path } = value;\n    return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n        \"useHookResult.useMemo\": ()=>({\n                path\n            })\n    }[\"useHookResult.useMemo\"], [\n        path\n    ]);\n}\n/**\n * @internal\n */ function createRootHooks(config) {\n    const mutationSuccessOverride = (config?.overrides ?? config?.unstable_overrides)?.useMutation?.onSuccess ?? ((options)=>options.originalFn());\n    const Context = config?.context ?? TRPCContext;\n    const ReactQueryContext = config?.reactQueryContext;\n    const createClient = (opts)=>{\n        return (0,_trpc_client__WEBPACK_IMPORTED_MODULE_2__.createTRPCClient)(opts);\n    };\n    const TRPCProvider = (props)=>{\n        const { abortOnUnmount = false, client, queryClient, ssrContext } = props;\n        const [ssrState, setSSRState] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(props.ssrState ?? false);\n        (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n            \"createRootHooks.TRPCProvider.useEffect\": ()=>{\n                // Only updating state to `mounted` if we are using SSR.\n                // This makes it so we don't have an unnecessary re-render when opting out of SSR.\n                setSSRState({\n                    \"createRootHooks.TRPCProvider.useEffect\": (state)=>state ? 'mounted' : false\n                }[\"createRootHooks.TRPCProvider.useEffect\"]);\n            }\n        }[\"createRootHooks.TRPCProvider.useEffect\"], []);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createElement(Context.Provider, {\n            value: {\n                abortOnUnmount,\n                queryClient,\n                client,\n                ssrContext: ssrContext ?? null,\n                ssrState,\n                fetchQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n                    \"createRootHooks.TRPCProvider.useCallback\": (pathAndInput, opts)=>{\n                        return queryClient.fetchQuery({\n                            ...opts,\n                            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'query'),\n                            queryFn: {\n                                \"createRootHooks.TRPCProvider.useCallback\": ()=>client.query(...getClientArgs(pathAndInput, opts))\n                            }[\"createRootHooks.TRPCProvider.useCallback\"]\n                        });\n                    }\n                }[\"createRootHooks.TRPCProvider.useCallback\"], [\n                    client,\n                    queryClient\n                ]),\n                fetchInfiniteQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n                    \"createRootHooks.TRPCProvider.useCallback\": (pathAndInput, opts)=>{\n                        return queryClient.fetchInfiniteQuery({\n                            ...opts,\n                            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'infinite'),\n                            queryFn: {\n                                \"createRootHooks.TRPCProvider.useCallback\": ({ pageParam })=>{\n                                    const [path, input] = pathAndInput;\n                                    const actualInput = {\n                                        ...input,\n                                        cursor: pageParam\n                                    };\n                                    return client.query(...getClientArgs([\n                                        path,\n                                        actualInput\n                                    ], opts));\n                                }\n                            }[\"createRootHooks.TRPCProvider.useCallback\"]\n                        });\n                    }\n                }[\"createRootHooks.TRPCProvider.useCallback\"], [\n                    client,\n                    queryClient\n                ]),\n                prefetchQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n                    \"createRootHooks.TRPCProvider.useCallback\": (pathAndInput, opts)=>{\n                        return queryClient.prefetchQuery({\n                            ...opts,\n                            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'query'),\n                            queryFn: {\n                                \"createRootHooks.TRPCProvider.useCallback\": ()=>client.query(...getClientArgs(pathAndInput, opts))\n                            }[\"createRootHooks.TRPCProvider.useCallback\"]\n                        });\n                    }\n                }[\"createRootHooks.TRPCProvider.useCallback\"], [\n                    client,\n                    queryClient\n                ]),\n                prefetchInfiniteQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n                    \"createRootHooks.TRPCProvider.useCallback\": (pathAndInput, opts)=>{\n                        return queryClient.prefetchInfiniteQuery({\n                            ...opts,\n                            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'infinite'),\n                            queryFn: {\n                                \"createRootHooks.TRPCProvider.useCallback\": ({ pageParam })=>{\n                                    const [path, input] = pathAndInput;\n                                    const actualInput = {\n                                        ...input,\n                                        cursor: pageParam\n                                    };\n                                    return client.query(...getClientArgs([\n                                        path,\n                                        actualInput\n                                    ], opts));\n                                }\n                            }[\"createRootHooks.TRPCProvider.useCallback\"]\n                        });\n                    }\n                }[\"createRootHooks.TRPCProvider.useCallback\"], [\n                    client,\n                    queryClient\n                ]),\n                ensureQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n                    \"createRootHooks.TRPCProvider.useCallback\": (pathAndInput, opts)=>{\n                        return queryClient.ensureQueryData({\n                            ...opts,\n                            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'query'),\n                            queryFn: {\n                                \"createRootHooks.TRPCProvider.useCallback\": ()=>client.query(...getClientArgs(pathAndInput, opts))\n                            }[\"createRootHooks.TRPCProvider.useCallback\"]\n                        });\n                    }\n                }[\"createRootHooks.TRPCProvider.useCallback\"], [\n                    client,\n                    queryClient\n                ]),\n                invalidateQueries: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n                    \"createRootHooks.TRPCProvider.useCallback\": (queryKey, filters, options)=>{\n                        return queryClient.invalidateQueries({\n                            ...filters,\n                            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'any')\n                        }, options);\n                    }\n                }[\"createRootHooks.TRPCProvider.useCallback\"], [\n                    queryClient\n                ]),\n                resetQueries: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n                    \"createRootHooks.TRPCProvider.useCallback\": (...args)=>{\n                        const [queryKey, filters, options] = args;\n                        return queryClient.resetQueries({\n                            ...filters,\n                            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'any')\n                        }, options);\n                    }\n                }[\"createRootHooks.TRPCProvider.useCallback\"], [\n                    queryClient\n                ]),\n                refetchQueries: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n                    \"createRootHooks.TRPCProvider.useCallback\": (...args)=>{\n                        const [queryKey, filters, options] = args;\n                        return queryClient.refetchQueries({\n                            ...filters,\n                            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'any')\n                        }, options);\n                    }\n                }[\"createRootHooks.TRPCProvider.useCallback\"], [\n                    queryClient\n                ]),\n                cancelQuery: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n                    \"createRootHooks.TRPCProvider.useCallback\": (pathAndInput)=>{\n                        return queryClient.cancelQueries({\n                            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'any')\n                        });\n                    }\n                }[\"createRootHooks.TRPCProvider.useCallback\"], [\n                    queryClient\n                ]),\n                setQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n                    \"createRootHooks.TRPCProvider.useCallback\": (...args)=>{\n                        const [queryKey, ...rest] = args;\n                        return queryClient.setQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'query'), ...rest);\n                    }\n                }[\"createRootHooks.TRPCProvider.useCallback\"], [\n                    queryClient\n                ]),\n                getQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n                    \"createRootHooks.TRPCProvider.useCallback\": (...args)=>{\n                        const [queryKey, ...rest] = args;\n                        return queryClient.getQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'query'), ...rest);\n                    }\n                }[\"createRootHooks.TRPCProvider.useCallback\"], [\n                    queryClient\n                ]),\n                setInfiniteQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n                    \"createRootHooks.TRPCProvider.useCallback\": (...args)=>{\n                        const [queryKey, ...rest] = args;\n                        return queryClient.setQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'infinite'), ...rest);\n                    }\n                }[\"createRootHooks.TRPCProvider.useCallback\"], [\n                    queryClient\n                ]),\n                getInfiniteQueryData: (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)({\n                    \"createRootHooks.TRPCProvider.useCallback\": (...args)=>{\n                        const [queryKey, ...rest] = args;\n                        return queryClient.getQueryData((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryKey, 'infinite'), ...rest);\n                    }\n                }[\"createRootHooks.TRPCProvider.useCallback\"], [\n                    queryClient\n                ])\n            }\n        }, props.children);\n    };\n    function useContext() {\n        return react__WEBPACK_IMPORTED_MODULE_3__.useContext(Context);\n    }\n    /**\n   * Hack to make sure errors return `status`='error` when doing SSR\n   * @link https://github.com/trpc/trpc/pull/1645\n   */ function useSSRQueryOptionsIfNeeded(pathAndInput, type, opts) {\n        const { queryClient, ssrState } = useContext();\n        return ssrState && ssrState !== 'mounted' && queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, type))?.state.status === 'error' ? {\n            retryOnMount: false,\n            ...opts\n        } : opts;\n    }\n    function useQuery$1(pathAndInput, opts) {\n        const context = useContext();\n        if (!context) {\n            throw new Error('Unable to retrieve application context. Did you forget to wrap your App inside `withTRPC` HoC?');\n        }\n        const { abortOnUnmount, client, ssrState, queryClient, prefetchQuery } = context;\n        const defaultOpts = queryClient.getQueryDefaults((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'query'));\n        if ( true && ssrState === 'prepass' && opts?.trpc?.ssr !== false && (opts?.enabled ?? defaultOpts?.enabled) !== false && !queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'query'))) {\n            void prefetchQuery(pathAndInput, opts);\n        }\n        const ssrOpts = useSSRQueryOptionsIfNeeded(pathAndInput, 'query', {\n            ...defaultOpts,\n            ...opts\n        });\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? config?.abortOnUnmount ?? abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.useQuery)({\n            ...ssrOpts,\n            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'query'),\n            queryFn: {\n                \"createRootHooks.useQuery$1.useQuery[hook]\": (queryFunctionContext)=>{\n                    const actualOpts = {\n                        ...ssrOpts,\n                        trpc: {\n                            ...ssrOpts?.trpc,\n                            ...shouldAbortOnUnmount ? {\n                                signal: queryFunctionContext.signal\n                            } : {}\n                        }\n                    };\n                    return client.query(...getClientArgs(pathAndInput, actualOpts));\n                }\n            }[\"createRootHooks.useQuery$1.useQuery[hook]\"],\n            context: ReactQueryContext\n        });\n        hook.trpc = useHookResult({\n            path: pathAndInput[0]\n        });\n        return hook;\n    }\n    function useMutation$1(path, opts) {\n        const { client } = useContext();\n        const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.useQueryClient)({\n            context: ReactQueryContext\n        });\n        const actualPath = Array.isArray(path) ? path[0] : path;\n        const defaultOpts = queryClient.getMutationDefaults([\n            actualPath.split('.')\n        ]);\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__.useMutation)({\n            ...opts,\n            mutationKey: [\n                actualPath.split('.')\n            ],\n            mutationFn: {\n                \"createRootHooks.useMutation$1.useMutation[hook]\": (input)=>{\n                    return client.mutation(...getClientArgs([\n                        actualPath,\n                        input\n                    ], opts));\n                }\n            }[\"createRootHooks.useMutation$1.useMutation[hook]\"],\n            context: ReactQueryContext,\n            onSuccess (...args) {\n                const originalFn = {\n                    \"createRootHooks.useMutation$1.useMutation[hook].originalFn\": ()=>opts?.onSuccess?.(...args) ?? defaultOpts?.onSuccess?.(...args)\n                }[\"createRootHooks.useMutation$1.useMutation[hook].originalFn\"];\n                return mutationSuccessOverride({\n                    originalFn,\n                    queryClient,\n                    meta: opts?.meta ?? defaultOpts?.meta ?? {}\n                });\n            }\n        });\n        hook.trpc = useHookResult({\n            path: actualPath\n        });\n        return hook;\n    }\n    /* istanbul ignore next -- @preserve */ function useSubscription(pathAndInput, opts) {\n        const enabled = opts?.enabled ?? true;\n        const queryKey = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__.hashQueryKey)(pathAndInput);\n        const { client } = useContext();\n        const optsRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(opts);\n        optsRef.current = opts;\n        (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)({\n            \"createRootHooks.useSubscription.useEffect\": ()=>{\n                if (!enabled) {\n                    return;\n                }\n                const [path, input] = pathAndInput;\n                let isStopped = false;\n                const subscription = client.subscription(path, input ?? undefined, {\n                    onStarted: {\n                        \"createRootHooks.useSubscription.useEffect.subscription\": ()=>{\n                            if (!isStopped) {\n                                optsRef.current.onStarted?.();\n                            }\n                        }\n                    }[\"createRootHooks.useSubscription.useEffect.subscription\"],\n                    onData: {\n                        \"createRootHooks.useSubscription.useEffect.subscription\": (data)=>{\n                            if (!isStopped) {\n                                // FIXME this shouldn't be needed as both should be `unknown` in next major\n                                optsRef.current.onData(data);\n                            }\n                        }\n                    }[\"createRootHooks.useSubscription.useEffect.subscription\"],\n                    onError: {\n                        \"createRootHooks.useSubscription.useEffect.subscription\": (err)=>{\n                            if (!isStopped) {\n                                optsRef.current.onError?.(err);\n                            }\n                        }\n                    }[\"createRootHooks.useSubscription.useEffect.subscription\"]\n                });\n                return ({\n                    \"createRootHooks.useSubscription.useEffect\": ()=>{\n                        isStopped = true;\n                        subscription.unsubscribe();\n                    }\n                })[\"createRootHooks.useSubscription.useEffect\"];\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            }\n        }[\"createRootHooks.useSubscription.useEffect\"], [\n            queryKey,\n            enabled\n        ]);\n    }\n    function useInfiniteQuery$1(pathAndInput, opts) {\n        const [path, input] = pathAndInput;\n        const { client, ssrState, prefetchInfiniteQuery, queryClient, abortOnUnmount } = useContext();\n        const defaultOpts = queryClient.getQueryDefaults((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'infinite'));\n        if ( true && ssrState === 'prepass' && opts?.trpc?.ssr !== false && (opts?.enabled ?? defaultOpts?.enabled) !== false && !queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'infinite'))) {\n            void prefetchInfiniteQuery(pathAndInput, {\n                ...defaultOpts,\n                ...opts\n            });\n        }\n        const ssrOpts = useSSRQueryOptionsIfNeeded(pathAndInput, 'infinite', {\n            ...defaultOpts,\n            ...opts\n        });\n        // request option should take priority over global\n        const shouldAbortOnUnmount = opts?.trpc?.abortOnUnmount ?? abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.useInfiniteQuery)({\n            ...ssrOpts,\n            queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(pathAndInput, 'infinite'),\n            queryFn: {\n                \"createRootHooks.useInfiniteQuery$1.useInfiniteQuery[hook]\": (queryFunctionContext)=>{\n                    const actualOpts = {\n                        ...ssrOpts,\n                        trpc: {\n                            ...ssrOpts?.trpc,\n                            ...shouldAbortOnUnmount ? {\n                                signal: queryFunctionContext.signal\n                            } : {}\n                        }\n                    };\n                    const actualInput = {\n                        ...input ?? {},\n                        cursor: queryFunctionContext.pageParam ?? opts?.initialCursor\n                    };\n                    // FIXME as any shouldn't be needed as client should be untyped too\n                    return client.query(...getClientArgs([\n                        path,\n                        actualInput\n                    ], actualOpts));\n                }\n            }[\"createRootHooks.useInfiniteQuery$1.useInfiniteQuery[hook]\"],\n            context: ReactQueryContext\n        });\n        hook.trpc = useHookResult({\n            path\n        });\n        return hook;\n    }\n    const useQueries$1 = (queriesCallback, context)=>{\n        const { ssrState, queryClient, prefetchQuery, client } = useContext();\n        const proxy = createUseQueriesProxy(client);\n        const queries = queriesCallback(proxy);\n        if ( true && ssrState === 'prepass') {\n            for (const query of queries){\n                const queryOption = query;\n                if (queryOption.trpc?.ssr !== false && !queryClient.getQueryCache().find((0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(queryOption.queryKey, 'query'))) {\n                    void prefetchQuery(queryOption.queryKey, queryOption);\n                }\n            }\n        }\n        return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQueries)({\n            queries: queries.map({\n                \"createRootHooks.useQueries$1.useQueries\": (query)=>({\n                        ...query,\n                        queryKey: (0,_getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(query.queryKey, 'query')\n                    })\n            }[\"createRootHooks.useQueries$1.useQueries\"]),\n            context\n        });\n    };\n    const useDehydratedState = (client, trpcState)=>{\n        const transformed = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n            \"createRootHooks.useDehydratedState.useMemo[transformed]\": ()=>{\n                if (!trpcState) {\n                    return trpcState;\n                }\n                return client.runtime.transformer.deserialize(trpcState);\n            }\n        }[\"createRootHooks.useDehydratedState.useMemo[transformed]\"], [\n            trpcState,\n            client\n        ]);\n        return transformed;\n    };\n    return {\n        Provider: TRPCProvider,\n        createClient,\n        useContext,\n        useUtils: useContext,\n        useQuery: useQuery$1,\n        useQueries: useQueries$1,\n        useMutation: useMutation$1,\n        useSubscription,\n        useDehydratedState,\n        useInfiniteQuery: useInfiniteQuery$1\n    };\n}\n/**\n * Create strongly typed react hooks\n * @internal\n * @deprecated\n */ function createHooksInternal(config) {\n    return createRootHooks(config);\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@trpc/react-query/dist/createHooksInternal-063195fc.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs":
/*!****************************************************************************!*\
  !*** ../node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getArrayQueryKey)\n/* harmony export */ });\n/**\n * To allow easy interactions with groups of related queries, such as\n * invalidating all queries of a router, we use an array as the path when\n * storing in tanstack query. This function converts from the `.` separated\n * path passed around internally by both the legacy and proxy implementation.\n * https://github.com/trpc/trpc/issues/2611\n **/ function getArrayQueryKey(queryKey, type) {\n    const queryKeyArrayed = Array.isArray(queryKey) ? queryKey : [\n        queryKey\n    ];\n    const [path, input] = queryKeyArrayed;\n    const arrayPath = typeof path !== 'string' || path === '' ? [] : path.split('.');\n    // Construct a query key that is easy to destructure and flexible for\n    // partial selecting etc.\n    // https://github.com/trpc/trpc/issues/3128\n    if (!input && (!type || type === 'any')) // we don't want nested array if path is empty, i.e. `[]` instead of `[[]]`\n    return arrayPath.length ? [\n        arrayPath\n    ] : [];\n    return [\n        arrayPath,\n        {\n            ...typeof input !== 'undefined' && {\n                input: input\n            },\n            ...type && type !== 'any' && {\n                type: type\n            }\n        }\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3JlYWN0LXF1ZXJ5L2Rpc3QvZ2V0QXJyYXlRdWVyeUtleS04NjEzNGY4Yi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7RUFNRSxHQUFHLFNBQVNBLGlCQUFpQkMsUUFBUSxFQUFFQyxJQUFJO0lBQ3pDLE1BQU1DLGtCQUFrQkMsTUFBTUMsT0FBTyxDQUFDSixZQUFZQSxXQUFXO1FBQ3pEQTtLQUNIO0lBQ0QsTUFBTSxDQUFDSyxNQUFNQyxNQUFNLEdBQUdKO0lBQ3RCLE1BQU1LLFlBQVksT0FBT0YsU0FBUyxZQUFZQSxTQUFTLEtBQUssRUFBRSxHQUFHQSxLQUFLRyxLQUFLLENBQUM7SUFDNUUscUVBQXFFO0lBQ3JFLHlCQUF5QjtJQUN6QiwyQ0FBMkM7SUFDM0MsSUFBSSxDQUFDRixTQUFVLEVBQUNMLFFBQVFBLFNBQVMsS0FBSSxHQUNyQywyRUFBMkU7SUFDM0UsT0FBT00sVUFBVUUsTUFBTSxHQUFHO1FBQ3RCRjtLQUNILEdBQUcsRUFBRTtJQUNOLE9BQU87UUFDSEE7UUFDQTtZQUNJLEdBQUcsT0FBT0QsVUFBVSxlQUFlO2dCQUMvQkEsT0FBT0E7WUFDWCxDQUFDO1lBQ0QsR0FBR0wsUUFBUUEsU0FBUyxTQUFTO2dCQUN6QkEsTUFBTUE7WUFDVixDQUFDO1FBQ0w7S0FDSDtBQUNMO0FBRWlDIiwic291cmNlcyI6WyJEOlxcdGVrb2EtZmlyc3RcXHRla29hLXRyYWRpbmdcXG5vZGVfbW9kdWxlc1xcQHRycGNcXHJlYWN0LXF1ZXJ5XFxkaXN0XFxnZXRBcnJheVF1ZXJ5S2V5LTg2MTM0ZjhiLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRvIGFsbG93IGVhc3kgaW50ZXJhY3Rpb25zIHdpdGggZ3JvdXBzIG9mIHJlbGF0ZWQgcXVlcmllcywgc3VjaCBhc1xuICogaW52YWxpZGF0aW5nIGFsbCBxdWVyaWVzIG9mIGEgcm91dGVyLCB3ZSB1c2UgYW4gYXJyYXkgYXMgdGhlIHBhdGggd2hlblxuICogc3RvcmluZyBpbiB0YW5zdGFjayBxdWVyeS4gVGhpcyBmdW5jdGlvbiBjb252ZXJ0cyBmcm9tIHRoZSBgLmAgc2VwYXJhdGVkXG4gKiBwYXRoIHBhc3NlZCBhcm91bmQgaW50ZXJuYWxseSBieSBib3RoIHRoZSBsZWdhY3kgYW5kIHByb3h5IGltcGxlbWVudGF0aW9uLlxuICogaHR0cHM6Ly9naXRodWIuY29tL3RycGMvdHJwYy9pc3N1ZXMvMjYxMVxuICoqLyBmdW5jdGlvbiBnZXRBcnJheVF1ZXJ5S2V5KHF1ZXJ5S2V5LCB0eXBlKSB7XG4gICAgY29uc3QgcXVlcnlLZXlBcnJheWVkID0gQXJyYXkuaXNBcnJheShxdWVyeUtleSkgPyBxdWVyeUtleSA6IFtcbiAgICAgICAgcXVlcnlLZXlcbiAgICBdO1xuICAgIGNvbnN0IFtwYXRoLCBpbnB1dF0gPSBxdWVyeUtleUFycmF5ZWQ7XG4gICAgY29uc3QgYXJyYXlQYXRoID0gdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnIHx8IHBhdGggPT09ICcnID8gW10gOiBwYXRoLnNwbGl0KCcuJyk7XG4gICAgLy8gQ29uc3RydWN0IGEgcXVlcnkga2V5IHRoYXQgaXMgZWFzeSB0byBkZXN0cnVjdHVyZSBhbmQgZmxleGlibGUgZm9yXG4gICAgLy8gcGFydGlhbCBzZWxlY3RpbmcgZXRjLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90cnBjL3RycGMvaXNzdWVzLzMxMjhcbiAgICBpZiAoIWlucHV0ICYmICghdHlwZSB8fCB0eXBlID09PSAnYW55JykpIC8vIGZvciBgdXRpbHMuaW52YWxpZGF0ZSgpYCB0byBtYXRjaCBhbGwgcXVlcmllcyAoaW5jbHVkaW5nIHZhbmlsbGEgcmVhY3QtcXVlcnkpXG4gICAgLy8gd2UgZG9uJ3Qgd2FudCBuZXN0ZWQgYXJyYXkgaWYgcGF0aCBpcyBlbXB0eSwgaS5lLiBgW11gIGluc3RlYWQgb2YgYFtbXV1gXG4gICAgcmV0dXJuIGFycmF5UGF0aC5sZW5ndGggPyBbXG4gICAgICAgIGFycmF5UGF0aFxuICAgIF0gOiBbXTtcbiAgICByZXR1cm4gW1xuICAgICAgICBhcnJheVBhdGgsXG4gICAgICAgIHtcbiAgICAgICAgICAgIC4uLnR5cGVvZiBpbnB1dCAhPT0gJ3VuZGVmaW5lZCcgJiYge1xuICAgICAgICAgICAgICAgIGlucHV0OiBpbnB1dFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC4uLnR5cGUgJiYgdHlwZSAhPT0gJ2FueScgJiYge1xuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF07XG59XG5cbmV4cG9ydCB7IGdldEFycmF5UXVlcnlLZXkgYXMgZyB9O1xuIl0sIm5hbWVzIjpbImdldEFycmF5UXVlcnlLZXkiLCJxdWVyeUtleSIsInR5cGUiLCJxdWVyeUtleUFycmF5ZWQiLCJBcnJheSIsImlzQXJyYXkiLCJwYXRoIiwiaW5wdXQiLCJhcnJheVBhdGgiLCJzcGxpdCIsImxlbmd0aCIsImciXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@trpc/react-query/dist/index.mjs":
/*!********************************************************!*\
  !*** ../node_modules/@trpc/react-query/dist/index.mjs ***!
  \********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.TRPCClientError),\n/* harmony export */   TRPCUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.clientCallTypeToProcedureType),\n/* harmony export */   createReactQueryHooks: () => (/* binding */ createReactQueryHooks),\n/* harmony export */   createTRPCClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCProxyClient),\n/* harmony export */   createTRPCReact: () => (/* binding */ createTRPCReact),\n/* harmony export */   createTRPCUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.createWSClient),\n/* harmony export */   experimental_formDataLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.experimental_formDataLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.getFetch),\n/* harmony export */   getQueryKey: () => (/* reexport safe */ _createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   getUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpBatchLink),\n/* harmony export */   httpLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpLink),\n/* harmony export */   httpLinkFactory: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpLinkFactory),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.loggerLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.splitLink),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.unstable_httpBatchStreamLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_0__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/client */ \"(ssr)/../node_modules/@trpc/client/dist/index.mjs\");\n/* harmony import */ var _createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createHooksInternal-063195fc.mjs */ \"(ssr)/../node_modules/@trpc/react-query/dist/createHooksInternal-063195fc.mjs\");\n/* harmony import */ var _trpc_server_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @trpc/server/shared */ \"@trpc/server/shared\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _getArrayQueryKey_86134f8b_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getArrayQueryKey-86134f8b.mjs */ \"(ssr)/../node_modules/@trpc/react-query/dist/getArrayQueryKey-86134f8b.mjs\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_trpc_client__WEBPACK_IMPORTED_MODULE_0__, _createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__, _trpc_server_shared__WEBPACK_IMPORTED_MODULE_2__]);\n([_trpc_client__WEBPACK_IMPORTED_MODULE_0__, _createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__, _trpc_server_shared__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n/**\n * @internal\n */ function createHooksInternalProxy(trpc) {\n    return (0,_trpc_server_shared__WEBPACK_IMPORTED_MODULE_2__.createFlatProxy)((key)=>{\n        if (key === 'useContext' || key === 'useUtils') {\n            return ()=>{\n                const context = trpc.useUtils();\n                // create a stable reference of the utils context\n                return (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)({\n                    \"createHooksInternalProxy.useMemo\": ()=>{\n                        return (0,_createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(context);\n                    }\n                }[\"createHooksInternalProxy.useMemo\"], [\n                    context\n                ]);\n            };\n        }\n        if (trpc.hasOwnProperty(key)) {\n            return trpc[key];\n        }\n        return (0,_createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(key, trpc);\n    });\n}\nfunction createTRPCReact(opts) {\n    const hooks = (0,_createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(opts);\n    const proxy = createHooksInternalProxy(hooks);\n    return proxy;\n}\n// interop:\n/**\n * @deprecated use `createTRPCReact` instead\n */ function createReactQueryHooks(opts) {\n    const trpc = (0,_createHooksInternal_063195fc_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(opts);\n    const proxy = createHooksInternalProxy(trpc);\n    return {\n        ...trpc,\n        proxy\n    };\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0B0cnBjL3JlYWN0LXF1ZXJ5L2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZCO0FBQ21IO0FBQzFFO0FBQ2hCO0FBQ3RCO0FBQ0Q7QUFDVTtBQUV6Qzs7Q0FFQyxHQUFHLFNBQVNVLHlCQUF5QkMsSUFBSTtJQUN0QyxPQUFPSCxvRUFBZUEsQ0FBQyxDQUFDSTtRQUNwQixJQUFJQSxRQUFRLGdCQUFnQkEsUUFBUSxZQUFZO1lBQzVDLE9BQU87Z0JBQ0gsTUFBTUMsVUFBVUYsS0FBS0csUUFBUTtnQkFDN0IsaURBQWlEO2dCQUNqRCxPQUFPTCw4Q0FBT0E7d0RBQUM7d0JBQ1gsT0FBT04sb0VBQTBCQSxDQUFDVTtvQkFDdEM7dURBQUc7b0JBQ0NBO2lCQUNIO1lBQ0w7UUFDSjtRQUNBLElBQUlGLEtBQUtJLGNBQWMsQ0FBQ0gsTUFBTTtZQUMxQixPQUFPRCxJQUFJLENBQUNDLElBQUk7UUFDcEI7UUFDQSxPQUFPUCxvRUFBMEJBLENBQUNPLEtBQUtEO0lBQzNDO0FBQ0o7QUFDQSxTQUFTSyxnQkFBZ0JDLElBQUk7SUFDekIsTUFBTUMsUUFBUWpCLG9FQUFtQkEsQ0FBQ2dCO0lBQ2xDLE1BQU1FLFFBQVFULHlCQUF5QlE7SUFDdkMsT0FBT0M7QUFDWDtBQUVBLFdBQVc7QUFDWDs7Q0FFQyxHQUFHLFNBQVNDLHNCQUFzQkgsSUFBSTtJQUNuQyxNQUFNTixPQUFPVixvRUFBbUJBLENBQUNnQjtJQUNqQyxNQUFNRSxRQUFRVCx5QkFBeUJDO0lBQ3ZDLE9BQU87UUFDSCxHQUFHQSxJQUFJO1FBQ1BRO0lBQ0o7QUFDSjtBQUVrRCIsInNvdXJjZXMiOlsiRDpcXHRla29hLWZpcnN0XFx0ZWtvYS10cmFkaW5nXFxub2RlX21vZHVsZXNcXEB0cnBjXFxyZWFjdC1xdWVyeVxcZGlzdFxcaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJ0B0cnBjL2NsaWVudCc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUhvb2tzSW50ZXJuYWwsIGEgYXMgY3JlYXRlUmVhY3RRdWVyeVV0aWxzUHJveHksIGIgYXMgY3JlYXRlUmVhY3RQcm94eURlY29yYXRpb24gfSBmcm9tICcuL2NyZWF0ZUhvb2tzSW50ZXJuYWwtMDYzMTk1ZmMubWpzJztcbmV4cG9ydCB7IGcgYXMgZ2V0UXVlcnlLZXkgfSBmcm9tICcuL2NyZWF0ZUhvb2tzSW50ZXJuYWwtMDYzMTk1ZmMubWpzJztcbmltcG9ydCB7IGNyZWF0ZUZsYXRQcm94eSB9IGZyb20gJ0B0cnBjL3NlcnZlci9zaGFyZWQnO1xuaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcbmltcG9ydCAnLi9nZXRBcnJheVF1ZXJ5S2V5LTg2MTM0ZjhiLm1qcyc7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi8gZnVuY3Rpb24gY3JlYXRlSG9va3NJbnRlcm5hbFByb3h5KHRycGMpIHtcbiAgICByZXR1cm4gY3JlYXRlRmxhdFByb3h5KChrZXkpPT57XG4gICAgICAgIGlmIChrZXkgPT09ICd1c2VDb250ZXh0JyB8fCBrZXkgPT09ICd1c2VVdGlscycpIHtcbiAgICAgICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0cnBjLnVzZVV0aWxzKCk7XG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgc3RhYmxlIHJlZmVyZW5jZSBvZiB0aGUgdXRpbHMgY29udGV4dFxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VNZW1vKCgpPT57XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVSZWFjdFF1ZXJ5VXRpbHNQcm94eShjb250ZXh0KTtcbiAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRycGMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRycGNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlUmVhY3RQcm94eURlY29yYXRpb24oa2V5LCB0cnBjKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRSUENSZWFjdChvcHRzKSB7XG4gICAgY29uc3QgaG9va3MgPSBjcmVhdGVIb29rc0ludGVybmFsKG9wdHMpO1xuICAgIGNvbnN0IHByb3h5ID0gY3JlYXRlSG9va3NJbnRlcm5hbFByb3h5KGhvb2tzKTtcbiAgICByZXR1cm4gcHJveHk7XG59XG5cbi8vIGludGVyb3A6XG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSBgY3JlYXRlVFJQQ1JlYWN0YCBpbnN0ZWFkXG4gKi8gZnVuY3Rpb24gY3JlYXRlUmVhY3RRdWVyeUhvb2tzKG9wdHMpIHtcbiAgICBjb25zdCB0cnBjID0gY3JlYXRlSG9va3NJbnRlcm5hbChvcHRzKTtcbiAgICBjb25zdCBwcm94eSA9IGNyZWF0ZUhvb2tzSW50ZXJuYWxQcm94eSh0cnBjKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi50cnBjLFxuICAgICAgICBwcm94eVxuICAgIH07XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVJlYWN0UXVlcnlIb29rcywgY3JlYXRlVFJQQ1JlYWN0IH07XG4iXSwibmFtZXMiOlsiYyIsImNyZWF0ZUhvb2tzSW50ZXJuYWwiLCJhIiwiY3JlYXRlUmVhY3RRdWVyeVV0aWxzUHJveHkiLCJiIiwiY3JlYXRlUmVhY3RQcm94eURlY29yYXRpb24iLCJnIiwiZ2V0UXVlcnlLZXkiLCJjcmVhdGVGbGF0UHJveHkiLCJ1c2VNZW1vIiwiY3JlYXRlSG9va3NJbnRlcm5hbFByb3h5IiwidHJwYyIsImtleSIsImNvbnRleHQiLCJ1c2VVdGlscyIsImhhc093blByb3BlcnR5IiwiY3JlYXRlVFJQQ1JlYWN0Iiwib3B0cyIsImhvb2tzIiwicHJveHkiLCJjcmVhdGVSZWFjdFF1ZXJ5SG9va3MiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@trpc/react-query/dist/index.mjs\n");

/***/ })

};
;